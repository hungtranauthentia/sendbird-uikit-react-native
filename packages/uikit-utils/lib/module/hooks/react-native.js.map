{"version":3,"names":["useEffect","useRef","useState","AppState","useSafeAreaInsets","edgePaddingMap","left","right","top","bottom","useSafeAreaPadding","edges","safeAreaInsets","reduce","map","edge","paddingKey","useAppState","type","listener","callbackRef","current","eventListener","state","subscriber","addEventListener","remove","useDeferredModalState","resolveRef","visible","setVisible","onClose","Promise","resolve","onDismiss","_resolveRef$current","call"],"sources":["react-native.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { AppState, AppStateEvent, AppStateStatus } from 'react-native';\nimport { EdgeInsets, useSafeAreaInsets } from 'react-native-safe-area-context';\n\ntype EdgePaddingMap = {\n  left: 'paddingLeft';\n  right: 'paddingRight';\n  top: 'paddingTop';\n  bottom: 'paddingBottom';\n};\nconst edgePaddingMap: EdgePaddingMap = {\n  left: 'paddingLeft',\n  right: 'paddingRight',\n  top: 'paddingTop',\n  bottom: 'paddingBottom',\n};\n\nexport const useSafeAreaPadding = <\n  T extends keyof EdgeInsets,\n  Result extends { [key in EdgePaddingMap[T]]: EdgeInsets[T] },\n>(\n  edges: T[],\n): Result => {\n  const safeAreaInsets = useSafeAreaInsets();\n  return edges.reduce((map, edge) => {\n    const paddingKey = edgePaddingMap[edge];\n    map[paddingKey] = safeAreaInsets[edge];\n    return map;\n  }, {} as { [key in EdgePaddingMap[T]]: EdgeInsets[T] }) as Result;\n};\n\ntype AppStateListener = (status: AppStateStatus) => void;\n\nexport const useAppState = (type: AppStateEvent, listener: AppStateListener) => {\n  const callbackRef = useRef<AppStateListener>(listener);\n  callbackRef.current = listener;\n\n  useEffect(() => {\n    const eventListener = (state: AppStateStatus) => callbackRef.current(state);\n    const subscriber = AppState.addEventListener(type, eventListener);\n\n    return () => {\n      if (subscriber?.remove) subscriber.remove();\n    };\n  }, []);\n};\n\n/**\n * To display a new modal in React-Native, you should ensure that a new modal is opened only after the existing modal has been dismissed to avoid conflicts.\n * To achieve this, you can use a deferred onClose that can be awaited until the onDismiss is called.\n * */\nexport const useDeferredModalState = () => {\n  const resolveRef = useRef<(value: void) => void>();\n  const [visible, setVisible] = useState(false);\n\n  return {\n    onClose: () => {\n      return new Promise<void>((resolve) => {\n        resolveRef.current = resolve;\n        setVisible(false);\n      });\n    },\n    onDismiss: () => {\n      resolveRef.current?.();\n    },\n    visible,\n    setVisible,\n  };\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,QAAQ,QAAuC,cAAc;AACtE,SAAqBC,iBAAiB,QAAQ,gCAAgC;AAQ9E,MAAMC,cAA8B,GAAG;EACrCC,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE,cAAc;EACrBC,GAAG,EAAE,YAAY;EACjBC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAI7BC,KAAU,IACC;EACX,MAAMC,cAAc,GAAGR,iBAAiB,EAAE;EAC1C,OAAOO,KAAK,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;IACjC,MAAMC,UAAU,GAAGX,cAAc,CAACU,IAAI,CAAC;IACvCD,GAAG,CAACE,UAAU,CAAC,GAAGJ,cAAc,CAACG,IAAI,CAAC;IACtC,OAAOD,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAkD;AACzD,CAAC;AAID,OAAO,MAAMG,WAAW,GAAGA,CAACC,IAAmB,EAAEC,QAA0B,KAAK;EAC9E,MAAMC,WAAW,GAAGnB,MAAM,CAAmBkB,QAAQ,CAAC;EACtDC,WAAW,CAACC,OAAO,GAAGF,QAAQ;EAE9BnB,SAAS,CAAC,MAAM;IACd,MAAMsB,aAAa,GAAIC,KAAqB,IAAKH,WAAW,CAACC,OAAO,CAACE,KAAK,CAAC;IAC3E,MAAMC,UAAU,GAAGrB,QAAQ,CAACsB,gBAAgB,CAACP,IAAI,EAAEI,aAAa,CAAC;IAEjE,OAAO,MAAM;MACX,IAAIE,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEE,MAAM,EAAEF,UAAU,CAACE,MAAM,EAAE;IAC7C,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EACzC,MAAMC,UAAU,GAAG3B,MAAM,EAAyB;EAClD,MAAM,CAAC4B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAE7C,OAAO;IACL6B,OAAO,EAAEA,CAAA,KAAM;MACb,OAAO,IAAIC,OAAO,CAAQC,OAAO,IAAK;QACpCL,UAAU,CAACP,OAAO,GAAGY,OAAO;QAC5BH,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC;IACDI,SAAS,EAAEA,CAAA,KAAM;MAAA,IAAAC,mBAAA;MACf,CAAAA,mBAAA,GAAAP,UAAU,CAACP,OAAO,cAAAc,mBAAA,uBAAlBA,mBAAA,CAAAC,IAAA,CAAAR,UAAU,CAAY;IACxB,CAAC;IACDC,OAAO;IACPC;EACF,CAAC;AACH,CAAC"}