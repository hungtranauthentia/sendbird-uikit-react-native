{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\nimport type { FlatListProps } from 'react-native';\n\nimport type { UseOpenChannelListOptions } from '@sendbird/uikit-chat-hooks';\nimport type { SendbirdOpenChannel } from '@sendbird/uikit-utils';\n\nimport type { CommonComponent } from '../../types';\n\nexport type OpenChannelListProps = {\n  Fragment: {\n    onPressChannel: OpenChannelListProps['List']['onPressChannel'];\n    onPressCreateChannel: () => void;\n    renderOpenChannelPreview?: OpenChannelListProps['List']['renderOpenChannelPreview'];\n    queryCreator?: UseOpenChannelListOptions['queryCreator'];\n    flatListProps?: OpenChannelListProps['List']['flatListProps'];\n  };\n  Header: {\n    onPressHeaderRight: () => void;\n  };\n  List: {\n    onPressChannel: (channel: SendbirdOpenChannel) => void;\n    openChannels: SendbirdOpenChannel[];\n    renderOpenChannelPreview: (props: {\n      channel: SendbirdOpenChannel;\n      onPress: () => void;\n    }) => React.ReactElement | null;\n    onLoadNext: () => Promise<void>;\n    flatListProps?: Omit<FlatListProps<SendbirdOpenChannel>, 'data' | 'renderItem'>;\n    refreshing: boolean;\n    onRefresh: () => void;\n  };\n  StatusError: {\n    onPressRetry: () => void;\n  };\n};\n\n/**\n * Internal context for OpenChannelList\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport type OpenChannelListContextsType = {\n  Fragment: React.Context<{\n    headerTitle: string;\n  }>;\n};\nexport interface OpenChannelListModule {\n  Provider: CommonComponent;\n  Header: CommonComponent<OpenChannelListProps['Header']>;\n  List: CommonComponent<OpenChannelListProps['List']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n  StatusError: CommonComponent<OpenChannelListProps['StatusError']>;\n}\n\nexport type OpenChannelListFragment = React.FC<OpenChannelListProps['Fragment']>;\n"],"mappings":""}