{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\nimport type { FlatListProps } from 'react-native';\n\nimport type { SendbirdBaseMessage, SendbirdGroupChannel, SendbirdMessageSearchQuery } from '@sendbird/uikit-utils';\n\nimport type { CommonComponent } from '../../types';\n\nexport type MessageSearchProps = {\n  Fragment: {\n    channel: SendbirdGroupChannel;\n    onPressHeaderLeft: MessageSearchProps['Header']['onPressHeaderLeft'];\n    onPressSearchResultItem: MessageSearchProps['List']['onPressSearchResultItem'];\n    renderSearchResultItem?: MessageSearchProps['List']['renderSearchResultItem'];\n    queryCreator?: () => SendbirdMessageSearchQuery;\n  };\n  Header: {\n    keyword: string;\n    onChangeKeyword: (value: string) => void;\n    onPressHeaderLeft: () => void;\n    onPressHeaderRight: () => void;\n  };\n  List: {\n    channel: SendbirdGroupChannel;\n    messages: SendbirdBaseMessage[];\n    onPressSearchResultItem: (params: { channel: SendbirdGroupChannel; message: SendbirdBaseMessage }) => void;\n    renderSearchResultItem: (props: {\n      channel: SendbirdGroupChannel;\n      message: SendbirdBaseMessage;\n      onPress: () => void;\n    }) => React.ReactElement | null;\n    flatListProps?: Partial<FlatListProps<SendbirdBaseMessage>>;\n  };\n  StatusError: {\n    onPressRetry: () => void;\n  };\n};\n\n/**\n * Internal context for MessageSearch\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport type MessageSearchContextsType = {\n  Fragment: React.Context<null>;\n};\nexport interface MessageSearchModule {\n  Provider: CommonComponent;\n  Header: CommonComponent<MessageSearchProps['Header']>;\n  List: CommonComponent<MessageSearchProps['List']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n  StatusError: CommonComponent<MessageSearchProps['StatusError']>;\n}\n\nexport type MessageSearchFragment = React.FC<MessageSearchProps['Fragment']>;\n"],"mappings":""}