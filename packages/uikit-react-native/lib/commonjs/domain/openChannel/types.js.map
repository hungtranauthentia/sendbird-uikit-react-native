{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\n\nimport type { UseOpenChannelMessagesOptions } from '@sendbird/uikit-chat-hooks';\nimport type { Icon } from '@sendbird/uikit-react-native-foundation';\nimport type {\n  OnBeforeHandler,\n  PickPartial,\n  SendbirdFileMessage,\n  SendbirdFileMessageCreateParams,\n  SendbirdFileMessageUpdateParams,\n  SendbirdMessage,\n  SendbirdOpenChannel,\n  SendbirdUserMessage,\n  SendbirdUserMessageCreateParams,\n  SendbirdUserMessageUpdateParams,\n} from '@sendbird/uikit-utils';\n\nimport type { ChannelInputProps } from '../../components/ChannelInput';\nimport type { ChannelMessageListProps } from '../../components/ChannelMessageList';\nimport type { CommonComponent } from '../../types';\nimport type { PubSub } from '../../utils/pubsub';\n\nexport type OpenChannelProps = {\n  Fragment: {\n    channel: SendbirdOpenChannel;\n    onChannelDeleted: () => void;\n    onPressHeaderLeft: OpenChannelProps['Header']['onPressHeaderLeft'];\n    onPressHeaderRightWithSettings: OpenChannelProps['Header']['onPressHeaderRight'];\n    onPressHeaderRightWithParticipants: OpenChannelProps['Header']['onPressHeaderRight'];\n    onPressMediaMessage?: OpenChannelProps['MessageList']['onPressMediaMessage'];\n\n    onBeforeSendUserMessage?: OnBeforeHandler<SendbirdUserMessageCreateParams>;\n    onBeforeSendFileMessage?: OnBeforeHandler<SendbirdFileMessageCreateParams>;\n    onBeforeUpdateUserMessage?: OnBeforeHandler<SendbirdUserMessageUpdateParams>;\n    onBeforeUpdateFileMessage?: OnBeforeHandler<SendbirdFileMessageUpdateParams>;\n\n    renderMessage?: OpenChannelProps['MessageList']['renderMessage'];\n    renderNewMessagesButton?: OpenChannelProps['MessageList']['renderNewMessagesButton'];\n    renderScrollToBottomButton?: OpenChannelProps['MessageList']['renderScrollToBottomButton'];\n\n    enableMessageGrouping?: OpenChannelProps['MessageList']['enableMessageGrouping'];\n\n    keyboardAvoidOffset?: OpenChannelProps['Provider']['keyboardAvoidOffset'];\n    flatListProps?: OpenChannelProps['MessageList']['flatListProps'];\n    sortComparator?: UseOpenChannelMessagesOptions['sortComparator'];\n    queryCreator?: UseOpenChannelMessagesOptions['queryCreator'];\n  };\n  Header: {\n    rightIconName: keyof typeof Icon.Assets;\n    onPressHeaderLeft: () => void;\n    onPressHeaderRight: () => void;\n  };\n\n  MessageList: Pick<\n    ChannelMessageListProps<SendbirdOpenChannel>,\n    | 'enableMessageGrouping'\n    | 'currentUserId'\n    | 'channel'\n    | 'messages'\n    | 'newMessages'\n    | 'scrolledAwayFromBottom'\n    | 'onScrolledAwayFromBottom'\n    | 'onTopReached'\n    | 'onBottomReached'\n    | 'onResendFailedMessage'\n    | 'onDeleteMessage'\n    | 'onPressMediaMessage'\n    | 'renderMessage'\n    | 'renderNewMessagesButton'\n    | 'renderScrollToBottomButton'\n    | 'flatListProps'\n    | 'hasNext'\n  >;\n  Input: PickPartial<\n    ChannelInputProps,\n    | 'shouldRenderInput'\n    | 'onPressSendUserMessage'\n    | 'onPressSendFileMessage'\n    | 'onPressUpdateUserMessage'\n    | 'onPressUpdateFileMessage'\n    | 'AttachmentsButton',\n    'inputDisabled'\n  >;\n\n  Provider: {\n    channel: SendbirdOpenChannel;\n    keyboardAvoidOffset?: number;\n    openChannelPubSub: PubSub<OpenChannelPubSubContextPayload>;\n  };\n};\n\n/**\n * Internal context for OpenChannel\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport type OpenChannelContextsType = {\n  Fragment: React.Context<{\n    headerTitle: string;\n    channel: SendbirdOpenChannel;\n    messageToEdit?: SendbirdUserMessage | SendbirdFileMessage;\n    setMessageToEdit: (msg?: SendbirdUserMessage | SendbirdFileMessage) => void;\n    keyboardAvoidOffset?: number;\n  }>;\n  PubSub: React.Context<PubSub<OpenChannelPubSubContextPayload>>;\n};\nexport interface OpenChannelModule {\n  Provider: CommonComponent<OpenChannelProps['Provider']>;\n  Header: CommonComponent<OpenChannelProps['Header']>;\n  MessageList: CommonComponent<OpenChannelProps['MessageList']>;\n  Input: CommonComponent<OpenChannelProps['Input']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n}\n\nexport type OpenChannelFragment = React.FC<OpenChannelProps['Fragment']>;\n\nexport type OpenChannelPubSubContextPayload =\n  | {\n      type: 'MESSAGE_SENT_PENDING' | 'MESSAGE_SENT_SUCCESS';\n      data: {\n        message: SendbirdUserMessage | SendbirdFileMessage;\n      };\n    }\n  | {\n      type: 'MESSAGES_RECEIVED';\n      data: {\n        messages: SendbirdMessage[];\n      };\n    };\n"],"mappings":""}