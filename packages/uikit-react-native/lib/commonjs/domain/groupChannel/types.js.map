{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\nimport type { FlatList } from 'react-native';\n\nimport type { MessageCollectionParams, MessageFilterParams } from '@sendbird/chat/groupChannel';\nimport type { UseGroupChannelMessagesOptions } from '@sendbird/uikit-chat-hooks';\nimport type {\n  OnBeforeHandler,\n  PickPartial,\n  SendbirdFileMessage,\n  SendbirdFileMessageCreateParams,\n  SendbirdFileMessageUpdateParams,\n  SendbirdGroupChannel,\n  SendbirdMessage,\n  SendbirdUser,\n  SendbirdUserMessage,\n  SendbirdUserMessageCreateParams,\n  SendbirdUserMessageUpdateParams,\n} from '@sendbird/uikit-utils';\n\nimport type { ChannelInputProps, SuggestedMentionListProps } from '../../components/ChannelInput';\nimport type { ChannelMessageListProps } from '../../components/ChannelMessageList';\nimport type { CommonComponent } from '../../types';\nimport type { PubSub } from '../../utils/pubsub';\n\nexport type MessageListQueryParamsType = Omit<MessageCollectionParams, 'filter'> & MessageFilterParams;\nexport interface GroupChannelProps {\n  Fragment: {\n    channel: SendbirdGroupChannel;\n    onChannelDeleted: () => void;\n    onPressHeaderLeft: GroupChannelProps['Header']['onPressHeaderLeft'];\n    onPressHeaderRight: GroupChannelProps['Header']['onPressHeaderRight'];\n    onPressMediaMessage?: GroupChannelProps['MessageList']['onPressMediaMessage'];\n\n    onBeforeSendUserMessage?: OnBeforeHandler<SendbirdUserMessageCreateParams>;\n    onBeforeSendFileMessage?: OnBeforeHandler<SendbirdFileMessageCreateParams>;\n    onBeforeUpdateUserMessage?: OnBeforeHandler<SendbirdUserMessageUpdateParams>;\n    onBeforeUpdateFileMessage?: OnBeforeHandler<SendbirdFileMessageUpdateParams>;\n\n    renderMessage?: GroupChannelProps['MessageList']['renderMessage'];\n    renderNewMessagesButton?: GroupChannelProps['MessageList']['renderNewMessagesButton'];\n    renderScrollToBottomButton?: GroupChannelProps['MessageList']['renderScrollToBottomButton'];\n\n    enableTypingIndicator?: GroupChannelProps['Provider']['enableTypingIndicator'];\n    enableMessageGrouping?: GroupChannelProps['MessageList']['enableMessageGrouping'];\n\n    keyboardAvoidOffset?: GroupChannelProps['Provider']['keyboardAvoidOffset'];\n    flatListProps?: GroupChannelProps['MessageList']['flatListProps'];\n    sortComparator?: UseGroupChannelMessagesOptions['sortComparator'];\n\n    searchItem?: GroupChannelProps['MessageList']['searchItem'];\n\n    /**\n     * @description You can specify the query parameters for the message list.\n     * @example\n     * ```\n     * <GroupChannelFragment messageListQueryParams={{ prevResultLimit: 20, customTypesFilter: ['filter'] }} />\n     * ```\n     * */\n    messageListQueryParams?: MessageListQueryParamsType;\n    /** @deprecated Please use `messageListQueryParams` instead */\n    collectionCreator?: UseGroupChannelMessagesOptions['collectionCreator'];\n  };\n  Header: {\n    shouldHideRight: () => boolean;\n    onPressHeaderLeft: () => void;\n    onPressHeaderRight: () => void;\n  };\n  MessageList: Pick<\n    ChannelMessageListProps<SendbirdGroupChannel>,\n    | 'enableMessageGrouping'\n    | 'currentUserId'\n    | 'channel'\n    | 'messages'\n    | 'newMessages'\n    | 'scrolledAwayFromBottom'\n    | 'onScrolledAwayFromBottom'\n    | 'onTopReached'\n    | 'onBottomReached'\n    | 'onResendFailedMessage'\n    | 'onDeleteMessage'\n    | 'onPressMediaMessage'\n    | 'renderMessage'\n    | 'renderNewMessagesButton'\n    | 'renderScrollToBottomButton'\n    | 'flatListProps'\n    | 'hasNext'\n    | 'searchItem'\n  > & {\n    onResetMessageList: () => Promise<void>;\n    onResetMessageListWithStartingPoint: (startingPoint: number) => Promise<void>;\n\n    // Changing the search item will trigger the focus animation on messages.\n    onUpdateSearchItem: (searchItem?: GroupChannelProps['MessageList']['searchItem']) => void;\n  };\n  Input: PickPartial<\n    ChannelInputProps,\n    | 'shouldRenderInput'\n    | 'onPressSendUserMessage'\n    | 'onPressSendFileMessage'\n    | 'onPressUpdateUserMessage'\n    | 'onPressUpdateFileMessage'\n    | 'SuggestedMentionList'\n    | 'AttachmentsButton',\n    'inputDisabled'\n  >;\n\n  SuggestedMentionList: SuggestedMentionListProps;\n  Provider: {\n    channel: SendbirdGroupChannel;\n    enableTypingIndicator: boolean;\n    keyboardAvoidOffset?: number;\n    groupChannelPubSub: PubSub<GroupChannelPubSubContextPayload>;\n\n    messages: SendbirdMessage[];\n    // Changing the search item will trigger the focus animation on messages.\n    onUpdateSearchItem: (searchItem?: GroupChannelProps['MessageList']['searchItem']) => void;\n  };\n}\n\n/**\n * Internal context for GroupChannel\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport interface GroupChannelContextsType {\n  Fragment: React.Context<{\n    headerTitle: string;\n    keyboardAvoidOffset?: number;\n    channel: SendbirdGroupChannel;\n    messageToEdit?: SendbirdUserMessage | SendbirdFileMessage;\n    setMessageToEdit: (msg?: SendbirdUserMessage | SendbirdFileMessage) => void;\n    messageToReply?: SendbirdUserMessage | SendbirdFileMessage;\n    setMessageToReply: (msg?: SendbirdUserMessage | SendbirdFileMessage) => void;\n  }>;\n  TypingIndicator: React.Context<{\n    typingUsers: SendbirdUser[];\n  }>;\n  PubSub: React.Context<PubSub<GroupChannelPubSubContextPayload>>;\n  MessageList: React.Context<{\n    /**\n     * ref object for FlatList of MessageList\n     * */\n    flatListRef: React.MutableRefObject<FlatList | null>;\n    /**\n     * Function that scrolls to a message within a group channel.\n     * @param messageId {number} - The id of the message to scroll.\n     * @param options {object} - Scroll options (optional).\n     * @param options.focusAnimated {boolean} - Enable a shake animation on the message component upon completion of scrolling.\n     * @param options.viewPosition {number} - Position information to adjust the visible area during scrolling. bottom(0) ~ top(1.0)\n     *\n     * @example\n     * ```\n     *   const { scrollToMessage } = useContext(GroupChannelContexts.MessageList);\n     *   const messageIncludedInMessageList = scrollToMessage(lastMessage.messageId, { focusAnimated: true, viewPosition: 1 });\n     *   if (!messageIncludedInMessageList) console.warn('Message not found in the message list.');\n     * ```\n     * */\n    scrollToMessage: (messageId: number, options?: { focusAnimated?: boolean; viewPosition?: number }) => boolean;\n    /**\n     * Call the FlatList function asynchronously to scroll to bottom lazily\n     * to avoid scrolling before data rendering has been committed.\n     * */\n    lazyScrollToBottom: (params?: { animated?: boolean; timeout?: number }) => void;\n    /**\n     * Call the FlatList function asynchronously to scroll to index lazily.\n     * to avoid scrolling before data rendering has been committed.\n     * */\n    lazyScrollToIndex: (params?: {\n      index?: number;\n      animated?: boolean;\n      timeout?: number;\n      viewPosition?: number;\n    }) => void;\n  }>;\n}\nexport interface GroupChannelModule {\n  Provider: CommonComponent<GroupChannelProps['Provider']>;\n  Header: CommonComponent<GroupChannelProps['Header']>;\n  MessageList: CommonComponent<GroupChannelProps['MessageList']>;\n  Input: CommonComponent<GroupChannelProps['Input']>;\n  SuggestedMentionList: CommonComponent<GroupChannelProps['SuggestedMentionList']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n}\n\nexport type GroupChannelFragment = React.FC<GroupChannelProps['Fragment']>;\n\nexport type GroupChannelPubSubContextPayload =\n  | {\n      type: 'MESSAGE_SENT_PENDING' | 'MESSAGE_SENT_SUCCESS';\n      data: {\n        message: SendbirdUserMessage | SendbirdFileMessage;\n      };\n    }\n  | {\n      type: 'MESSAGES_RECEIVED' | 'MESSAGES_UPDATED';\n      data: {\n        messages: SendbirdMessage[];\n      };\n    }\n  | {\n      type: 'TYPING_BUBBLE_RENDERED';\n      data?: undefined;\n    };\n"],"mappings":""}