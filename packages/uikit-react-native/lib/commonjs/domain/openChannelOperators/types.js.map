{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\n\nimport type { UseUserListOptions } from '@sendbird/uikit-chat-hooks';\nimport type { SendbirdOpenChannel, SendbirdUser } from '@sendbird/uikit-utils';\n\nimport type { CommonComponent } from '../../types';\n\nexport type OpenChannelOperatorsProps = {\n  Fragment: {\n    channel: SendbirdOpenChannel;\n    onPressHeaderLeft: OpenChannelOperatorsProps['Header']['onPressHeaderLeft'];\n    onPressHeaderRight: OpenChannelOperatorsProps['Header']['onPressHeaderRight'];\n    renderUser?: OpenChannelOperatorsProps['List']['renderUser'];\n    queryCreator?: UseUserListOptions<SendbirdUser>['queryCreator'];\n  };\n  Header: {\n    onPressHeaderLeft: () => void;\n    onPressHeaderRight: () => void;\n  };\n  List: {\n    operators: SendbirdUser[];\n    onLoadNext: () => void;\n    renderUser: (props: { user: SendbirdUser }) => React.ReactElement | null;\n    ListEmptyComponent?: React.ReactElement;\n  };\n  StatusError: {\n    onPressRetry: () => void;\n  };\n  Provider: {\n    channel: SendbirdOpenChannel;\n  };\n};\n\n/**\n * Internal context for OpenChannelOperators\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport type OpenChannelOperatorsContextsType = {\n  Fragment: React.Context<{\n    headerTitle: string;\n    channel: SendbirdOpenChannel;\n  }>;\n};\nexport interface OpenChannelOperatorsModule {\n  Provider: CommonComponent<OpenChannelOperatorsProps['Provider']>;\n  Header: CommonComponent<OpenChannelOperatorsProps['Header']>;\n  List: CommonComponent<OpenChannelOperatorsProps['List']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n  StatusError: CommonComponent<OpenChannelOperatorsProps['StatusError']>;\n}\n\nexport type OpenChannelOperatorsFragment = React.FC<OpenChannelOperatorsProps['Fragment']>;\n"],"mappings":""}