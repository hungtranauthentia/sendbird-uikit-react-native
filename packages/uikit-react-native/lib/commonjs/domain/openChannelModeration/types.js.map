{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\n\nimport type { MenuBarProps } from '@sendbird/uikit-react-native-foundation';\nimport type { SendbirdOpenChannel } from '@sendbird/uikit-utils';\n\nimport type { CommonComponent } from '../../types';\n\nexport type OpenChannelModerationProps = {\n  Fragment: {\n    channel: SendbirdOpenChannel;\n    onPressHeaderLeft: OpenChannelModerationProps['Header']['onPressHeaderLeft'];\n    onPressMenuOperators: OpenChannelModerationProps['Menu']['onPressMenuOperators'];\n    onPressMenuMutedParticipants: OpenChannelModerationProps['Menu']['onPressMenuMutedParticipants'];\n    onPressMenuBannedUsers: OpenChannelModerationProps['Menu']['onPressMenuBannedUsers'];\n    menuItemsCreator?: OpenChannelModerationProps['Menu']['menuItemsCreator'];\n  };\n  Header: {\n    onPressHeaderLeft: () => void;\n  };\n  Menu: {\n    onPressMenuOperators: () => void;\n    onPressMenuMutedParticipants: () => void;\n    onPressMenuBannedUsers: () => void;\n    menuItemsCreator?: (defaultMenuItems: MenuBarProps[]) => MenuBarProps[];\n  };\n  Provider: {\n    channel: SendbirdOpenChannel;\n  };\n};\n\n/**\n * Internal context for OpenChannelModeration\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport type OpenChannelModerationContextsType = {\n  Fragment: React.Context<{\n    headerTitle: string;\n    channel: SendbirdOpenChannel;\n  }>;\n};\nexport interface OpenChannelModerationModule {\n  Provider: CommonComponent<OpenChannelModerationProps['Provider']>;\n  Header: CommonComponent<OpenChannelModerationProps['Header']>;\n  Menu: CommonComponent<OpenChannelModerationProps['Menu']>;\n}\n\nexport type OpenChannelModerationFragment = React.FC<OpenChannelModerationProps['Fragment']>;\n"],"mappings":""}