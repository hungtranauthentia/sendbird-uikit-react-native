{"version":3,"names":["_reactNative","require","createNativeNotificationService","_ref","messagingModule","permissionModule","module","authorizedStatus","AuthorizationStatus","AUTHORIZED","PROVISIONAL","getAPNSToken","getFCMToken","getToken","hasPushPermission","Platform","OS","result","checkNotifications","status","hasPermission","includes","requestPushPermission","requestNotifications","requestPermission","onTokenRefresh","handler","token","_default","exports","default"],"sources":["createNotificationService.native.ts"],"sourcesContent":["import type RNFBMessaging from '@react-native-firebase/messaging';\nimport { Platform } from 'react-native';\nimport type * as Permissions from 'react-native-permissions';\n\nimport type { NotificationServiceInterface } from './types';\n\nconst createNativeNotificationService = ({\n  messagingModule,\n  permissionModule,\n}: {\n  messagingModule: typeof RNFBMessaging;\n  permissionModule: typeof Permissions;\n}): NotificationServiceInterface => {\n  const module = messagingModule();\n  const authorizedStatus = [\n    messagingModule.AuthorizationStatus.AUTHORIZED,\n    messagingModule.AuthorizationStatus.PROVISIONAL,\n  ];\n  return {\n    getAPNSToken(): Promise<string | null> {\n      return module.getAPNSToken();\n    },\n    getFCMToken(): Promise<string | null> {\n      return module.getToken();\n    },\n    async hasPushPermission(): Promise<boolean> {\n      if (Platform.OS === 'android') {\n        const result = await permissionModule.checkNotifications();\n        return result.status === 'granted';\n      }\n\n      if (Platform.OS === 'ios') {\n        const status = await module.hasPermission();\n        return authorizedStatus.includes(status);\n      }\n\n      return false;\n    },\n    async requestPushPermission(): Promise<boolean> {\n      if (Platform.OS === 'android') {\n        const result = await permissionModule.requestNotifications([]);\n        return result.status === 'granted';\n      }\n\n      if (Platform.OS === 'ios') {\n        const status = await module.requestPermission();\n        return authorizedStatus.includes(status);\n      }\n\n      return false;\n    },\n    onTokenRefresh(handler: (token: string) => void): () => void | undefined {\n      return module.onTokenRefresh((token) => {\n        if (Platform.OS === 'android') handler(token);\n      });\n    },\n  };\n};\n\nexport default createNativeNotificationService;\n"],"mappings":";;;;;;AACA,IAAAA,YAAA,GAAAC,OAAA;AAKA,MAAMC,+BAA+B,GAAGC,IAAA,IAMJ;EAAA,IANK;IACvCC,eAAe;IACfC;EAIF,CAAC,GAAAF,IAAA;EACC,MAAMG,MAAM,GAAGF,eAAe,EAAE;EAChC,MAAMG,gBAAgB,GAAG,CACvBH,eAAe,CAACI,mBAAmB,CAACC,UAAU,EAC9CL,eAAe,CAACI,mBAAmB,CAACE,WAAW,CAChD;EACD,OAAO;IACLC,YAAYA,CAAA,EAA2B;MACrC,OAAOL,MAAM,CAACK,YAAY,EAAE;IAC9B,CAAC;IACDC,WAAWA,CAAA,EAA2B;MACpC,OAAON,MAAM,CAACO,QAAQ,EAAE;IAC1B,CAAC;IACD,MAAMC,iBAAiBA,CAAA,EAAqB;MAC1C,IAAIC,qBAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;QAC7B,MAAMC,MAAM,GAAG,MAAMZ,gBAAgB,CAACa,kBAAkB,EAAE;QAC1D,OAAOD,MAAM,CAACE,MAAM,KAAK,SAAS;MACpC;MAEA,IAAIJ,qBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;QACzB,MAAMG,MAAM,GAAG,MAAMb,MAAM,CAACc,aAAa,EAAE;QAC3C,OAAOb,gBAAgB,CAACc,QAAQ,CAACF,MAAM,CAAC;MAC1C;MAEA,OAAO,KAAK;IACd,CAAC;IACD,MAAMG,qBAAqBA,CAAA,EAAqB;MAC9C,IAAIP,qBAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;QAC7B,MAAMC,MAAM,GAAG,MAAMZ,gBAAgB,CAACkB,oBAAoB,CAAC,EAAE,CAAC;QAC9D,OAAON,MAAM,CAACE,MAAM,KAAK,SAAS;MACpC;MAEA,IAAIJ,qBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;QACzB,MAAMG,MAAM,GAAG,MAAMb,MAAM,CAACkB,iBAAiB,EAAE;QAC/C,OAAOjB,gBAAgB,CAACc,QAAQ,CAACF,MAAM,CAAC;MAC1C;MAEA,OAAO,KAAK;IACd,CAAC;IACDM,cAAcA,CAACC,OAAgC,EAA0B;MACvE,OAAOpB,MAAM,CAACmB,cAAc,CAAEE,KAAK,IAAK;QACtC,IAAIZ,qBAAQ,CAACC,EAAE,KAAK,SAAS,EAAEU,OAAO,CAACC,KAAK,CAAC;MAC/C,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC;AAAC,IAAAC,QAAA,GAEa1B,+BAA+B;AAAA2B,OAAA,CAAAC,OAAA,GAAAF,QAAA"}