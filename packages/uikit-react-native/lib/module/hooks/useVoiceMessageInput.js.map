{"version":3,"names":["useRef","useState","useAlert","Logger","getVoiceMessageFileObject","matchesOneOf","SBUUtils","useLocalization","usePlatformService","useVoiceMessageInput","_ref","onSend","onClose","alert","STRINGS","recorderService","playerService","fileService","status","setStatus","recordingTime","setRecordingTime","currentTime","minDuration","options","maxDuration","playingTime","setPlayingTime","duration","recordingPath","getVoiceMessageRecordingPath","current","Error","setVoiceMessageRecordingPath","path","clear","undefined","reset","state","actions","cancel","startRecording","granted","requestPermission","title","DIALOG","ALERT_PERMISSIONS_TITLE","message","ALERT_PERMISSIONS_MESSAGE","LABELS","PERMISSION_MICROPHONE","PERMISSION_APP_NAME","buttons","text","ALERT_PERMISSIONS_OK","onPress","openSettings","error","unsubscribeRecording","addRecordingListener","_ref2","prev","unsubscribeState","addStateListener","isExpo","record","uri","recordFilePath","createRecordFilePath","extension","stopRecording","stop","playPlayer","PERMISSION_DEVICE_STORAGE","unsubscribePlayback","addPlaybackListener","_ref3","play","pausePlayer","pause","send","voiceFile","Math","floor"],"sources":["useVoiceMessageInput.ts"],"sourcesContent":["import { useRef, useState } from 'react';\n\nimport { useAlert } from '@sendbird/uikit-react-native-foundation';\nimport { Logger, getVoiceMessageFileObject, matchesOneOf } from '@sendbird/uikit-utils';\n\nimport SBUUtils from '../libs/SBUUtils';\nimport { FileType } from '../platform/types';\nimport { useLocalization, usePlatformService } from './useContext';\n\ntype State = {\n  /**\n   * Status\n   *\n   * idle:\n   *   - cancel(): idle\n   *   - startRecording(): recording\n   * recording:\n   *   - cancel(): idle\n   *   - stopRecording(): recording_completed\n   *   - send(): recording_completed > idle\n   * recording_completed:\n   *   - cancel(): idle\n   *   - playPlayer(): playing\n   *   - send(): idle\n   * playing:\n   *   - cancel(): idle\n   *   - pausePlayer(): playing_paused\n   *   - send(): idle\n   * playing_paused:\n   *   - cancel(): idle\n   *   - playPlayer(): playing\n   *   - send(): idle\n   * */\n  status: 'idle' | 'recording' | 'recording_completed' | 'playing' | 'playing_paused';\n  recordingTime: {\n    currentTime: number;\n    minDuration: number;\n    maxDuration: number;\n  };\n  playingTime: {\n    currentTime: number;\n    duration: number;\n  };\n};\n\nexport interface VoiceMessageInputResult {\n  actions: {\n    cancel: () => Promise<void>;\n    startRecording: () => Promise<void>;\n    stopRecording: () => Promise<void>;\n    playPlayer: () => Promise<void>;\n    pausePlayer: () => Promise<void>;\n    send: () => Promise<void>;\n  };\n  state: State;\n}\n\ntype Props = {\n  onClose: () => Promise<void>;\n  onSend: (voiceFile: FileType, duration: number) => void;\n};\n\nconst useVoiceMessageInput = ({ onSend, onClose }: Props): VoiceMessageInputResult => {\n  const { alert } = useAlert();\n  const { STRINGS } = useLocalization();\n  const { recorderService, playerService, fileService } = usePlatformService();\n  const [status, setStatus] = useState<State['status']>('idle');\n\n  const [recordingTime, setRecordingTime] = useState({\n    currentTime: 0,\n    minDuration: recorderService.options.minDuration,\n    maxDuration: recorderService.options.maxDuration,\n  });\n  const [playingTime, setPlayingTime] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n\n  const recordingPath = useRef<{ recordFilePath: string; uri: string }>();\n  const getVoiceMessageRecordingPath = () => {\n    if (!recordingPath.current) throw new Error('No recording path');\n    return recordingPath.current;\n  };\n  const setVoiceMessageRecordingPath = (path: { recordFilePath: string; uri: string }) => {\n    recordingPath.current = path;\n  };\n\n  const clear = async () => {\n    recordingPath.current = undefined;\n    await playerService.reset();\n    await recorderService.reset();\n    setRecordingTime({\n      currentTime: 0,\n      minDuration: recorderService.options.minDuration,\n      maxDuration: recorderService.options.maxDuration,\n    });\n    setPlayingTime({\n      currentTime: 0,\n      duration: 0,\n    });\n    setStatus('idle');\n  };\n\n  return {\n    state: {\n      status,\n      recordingTime,\n      playingTime,\n    },\n    actions: {\n      async cancel() {\n        await clear();\n      },\n      async startRecording() {\n        const granted = await recorderService.requestPermission();\n        if (!granted) {\n          await onClose();\n          alert({\n            title: STRINGS.DIALOG.ALERT_PERMISSIONS_TITLE,\n            message: STRINGS.DIALOG.ALERT_PERMISSIONS_MESSAGE(\n              STRINGS.LABELS.PERMISSION_MICROPHONE,\n              STRINGS.LABELS.PERMISSION_APP_NAME,\n            ),\n            buttons: [{ text: STRINGS.DIALOG.ALERT_PERMISSIONS_OK, onPress: () => SBUUtils.openSettings() }],\n          });\n          Logger.error('Failed to request permission for recorder');\n          return;\n        }\n\n        if (matchesOneOf(status, ['idle'])) {\n          // Before start recording, if player is not idle, reset it.\n          if (playerService.state !== 'idle') {\n            await playerService.reset();\n          }\n\n          const unsubscribeRecording = recorderService.addRecordingListener(({ currentTime }) => {\n            setRecordingTime({\n              currentTime,\n              maxDuration: recorderService.options.maxDuration,\n              minDuration: recorderService.options.minDuration,\n            });\n            setPlayingTime((prev) => ({ ...prev, duration: currentTime }));\n          });\n\n          const unsubscribeState = recorderService.addStateListener((state) => {\n            switch (state) {\n              case 'recording':\n                setStatus('recording');\n                break;\n              case 'completed':\n                setStatus('recording_completed');\n                unsubscribeRecording();\n                unsubscribeState();\n                break;\n            }\n          });\n\n          if (SBUUtils.isExpo()) {\n            await recorderService.record();\n            if (recorderService.uri) {\n              setVoiceMessageRecordingPath({ recordFilePath: recorderService.uri, uri: recorderService.uri });\n            }\n          } else {\n            setVoiceMessageRecordingPath(fileService.createRecordFilePath(recorderService.options.extension));\n            await recorderService.record(getVoiceMessageRecordingPath().recordFilePath);\n          }\n        }\n      },\n      async stopRecording() {\n        if (matchesOneOf(status, ['recording'])) {\n          await recorderService.stop();\n        }\n      },\n      async playPlayer() {\n        const granted = await playerService.requestPermission();\n        if (!granted) {\n          alert({\n            title: STRINGS.DIALOG.ALERT_PERMISSIONS_TITLE,\n            message: STRINGS.DIALOG.ALERT_PERMISSIONS_MESSAGE(\n              STRINGS.LABELS.PERMISSION_DEVICE_STORAGE,\n              STRINGS.LABELS.PERMISSION_APP_NAME,\n            ),\n            buttons: [{ text: STRINGS.DIALOG.ALERT_PERMISSIONS_OK, onPress: () => SBUUtils.openSettings() }],\n          });\n          Logger.error('Failed to request permission for player');\n          return;\n        }\n\n        if (matchesOneOf(status, ['recording_completed', 'playing_paused'])) {\n          const unsubscribePlayback = playerService.addPlaybackListener(({ currentTime, duration }) => {\n            setPlayingTime({ currentTime, duration });\n          });\n\n          const unsubscribeState = playerService.addStateListener((state) => {\n            switch (state) {\n              case 'playing':\n                setStatus('playing');\n                break;\n              case 'paused': {\n                setStatus('playing_paused');\n                unsubscribeState();\n                unsubscribePlayback();\n                break;\n              }\n              case 'stopped': {\n                setStatus('playing_paused');\n                unsubscribeState();\n                unsubscribePlayback();\n                setPlayingTime((prev) => ({ ...prev, currentTime: 0 }));\n                break;\n              }\n            }\n          });\n\n          await playerService.play(getVoiceMessageRecordingPath().recordFilePath);\n        }\n      },\n      async pausePlayer() {\n        if (matchesOneOf(status, ['playing'])) {\n          await playerService.pause();\n        }\n      },\n      async send() {\n        if (\n          matchesOneOf(status, ['recording', 'recording_completed', 'playing', 'playing_paused']) &&\n          recordingPath.current\n        ) {\n          const voiceFile = getVoiceMessageFileObject(recordingPath.current.uri, recorderService.options.extension);\n          onSend(voiceFile, Math.floor(recordingTime.currentTime));\n          await clear();\n        }\n      },\n    },\n  };\n};\n\nexport default useVoiceMessageInput;\n"],"mappings":"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"}