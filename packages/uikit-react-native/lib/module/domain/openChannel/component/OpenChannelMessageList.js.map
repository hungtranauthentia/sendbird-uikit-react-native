{"version":3,"names":["React","useContext","useEffect","useRef","useState","useFreshCallback","ChannelMessageList","OpenChannelContexts","OpenChannelMessageList","props","setMessageToEdit","Fragment","subscribe","PubSub","ref","scrolledAwayFromBottom","setScrolledAwayFromBottom","scrollToBottom","animated","arguments","length","undefined","setTimeout","_ref$current","current","scrollToOffset","offset","_ref","type","createElement","_extends","onPressScrollToBottomButton","onPressNewMessagesButton","onScrolledAwayFromBottom","onEditMessage","memo"],"sources":["OpenChannelMessageList.tsx"],"sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\nimport type { FlatList } from 'react-native';\n\nimport { SendbirdMessage, useFreshCallback } from '@sendbird/uikit-utils';\n\nimport ChannelMessageList from '../../../components/ChannelMessageList';\nimport { OpenChannelContexts } from '../module/moduleContext';\nimport type { OpenChannelProps } from '../types';\n\nconst OpenChannelMessageList = (props: OpenChannelProps['MessageList']) => {\n  const { setMessageToEdit } = useContext(OpenChannelContexts.Fragment);\n  const { subscribe } = useContext(OpenChannelContexts.PubSub);\n\n  const ref = useRef<FlatList<SendbirdMessage>>(null);\n  const [scrolledAwayFromBottom, setScrolledAwayFromBottom] = useState(false);\n\n  const scrollToBottom = useFreshCallback((animated = false) => {\n    // FIXME: Workaround, should run after data has been applied to UI.\n    setTimeout(() => {\n      ref.current?.scrollToOffset({ offset: 0, animated });\n    }, 0);\n  });\n\n  useEffect(() => {\n    return subscribe(({ type }) => {\n      switch (type) {\n        case 'MESSAGES_RECEIVED': {\n          scrollToBottom(false);\n          break;\n        }\n        case 'MESSAGE_SENT_SUCCESS':\n        case 'MESSAGE_SENT_PENDING': {\n          scrollToBottom(false);\n          break;\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <ChannelMessageList\n      {...props}\n      ref={ref}\n      onPressScrollToBottomButton={scrollToBottom}\n      onPressNewMessagesButton={scrollToBottom}\n      scrolledAwayFromBottom={scrolledAwayFromBottom}\n      onScrolledAwayFromBottom={setScrolledAwayFromBottom}\n      onEditMessage={setMessageToEdit}\n    />\n  );\n};\n\nexport default React.memo(OpenChannelMessageList);\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAGtE,SAA0BC,gBAAgB,QAAQ,uBAAuB;AAEzE,OAAOC,kBAAkB,MAAM,wCAAwC;AACvE,SAASC,mBAAmB,QAAQ,yBAAyB;AAG7D,MAAMC,sBAAsB,GAAIC,KAAsC,IAAK;EACzE,MAAM;IAAEC;EAAiB,CAAC,GAAGT,UAAU,CAACM,mBAAmB,CAACI,QAAQ,CAAC;EACrE,MAAM;IAAEC;EAAU,CAAC,GAAGX,UAAU,CAACM,mBAAmB,CAACM,MAAM,CAAC;EAE5D,MAAMC,GAAG,GAAGX,MAAM,CAA4B,IAAI,CAAC;EACnD,MAAM,CAACY,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3E,MAAMa,cAAc,GAAGZ,gBAAgB,CAAC,YAAsB;IAAA,IAArBa,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACvD;IACAG,UAAU,CAAC,MAAM;MAAA,IAAAC,YAAA;MACf,CAAAA,YAAA,GAAAT,GAAG,CAACU,OAAO,cAAAD,YAAA,uBAAXA,YAAA,CAAaE,cAAc,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAER;MAAS,CAAC,CAAC;IACtD,CAAC,EAAE,CAAC,CAAC;EACP,CAAC,CAAC;EAEFhB,SAAS,CAAC,MAAM;IACd,OAAOU,SAAS,CAACe,IAAA,IAAc;MAAA,IAAb;QAAEC;MAAK,CAAC,GAAAD,IAAA;MACxB,QAAQC,IAAI;QACV,KAAK,mBAAmB;UAAE;YACxBX,cAAc,CAAC,KAAK,CAAC;YACrB;UACF;QACA,KAAK,sBAAsB;QAC3B,KAAK,sBAAsB;UAAE;YAC3BA,cAAc,CAAC,KAAK,CAAC;YACrB;UACF;MAAC;IAEL,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,KAAA,CAAA6B,aAAA,CAACvB,kBAAkB,EAAAwB,QAAA,KACbrB,KAAK;IACTK,GAAG,EAAEA,GAAI;IACTiB,2BAA2B,EAAEd,cAAe;IAC5Ce,wBAAwB,EAAEf,cAAe;IACzCF,sBAAsB,EAAEA,sBAAuB;IAC/CkB,wBAAwB,EAAEjB,yBAA0B;IACpDkB,aAAa,EAAExB;EAAiB,GAChC;AAEN,CAAC;AAED,4BAAeV,KAAK,CAACmC,IAAI,CAAC3B,sBAAsB,CAAC"}