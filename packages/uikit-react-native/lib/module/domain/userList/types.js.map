{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\n\nimport type { ContextValue } from '@sendbird/uikit-utils';\n\nimport type { CommonComponent } from '../../types';\n\nexport interface UserListProps<User> {\n  /** Props for `UserListModule.Header` **/\n  Header: {\n    right?: React.ReactNode;\n    left?: React.ReactNode;\n    onPressHeaderLeft: () => void;\n    onPressHeaderRight: (selectedUsers: User[]) => Promise<void>;\n    shouldActivateHeaderRight?: (selectedUsers: User[]) => boolean;\n  };\n  /** Props for `UserListModule.List` **/\n  List: {\n    /** User list from SendbirdChat SDK or Custom query {@link Fragment.queryCreator} **/\n    users: User[];\n    /** Render user component **/\n    renderUser: (\n      user: User,\n      selectedUsers: ContextValue<UserListContextsType<User>['List']>['selectedUsers'],\n      setSelectedUsers: ContextValue<UserListContextsType<User>['List']>['setSelectedUsers'],\n    ) => React.ReactElement | null;\n    /** Load next user list **/\n    onLoadNext: () => Promise<void>;\n    /** Refresh user list **/\n    onRefresh?: () => Promise<void>;\n    /** Refreshing state **/\n    refreshing?: boolean;\n    /** List empty component **/\n    ListEmptyComponent?: React.ReactElement;\n  };\n  /** Props for `UserListModule.Provider` **/\n  Provider: {\n    headerTitle: string;\n    headerRight: (selectedUsers: Array<User>) => string;\n  };\n  StatusError: {\n    onPressRetry: () => void;\n  };\n}\n\n/**\n * Internal context for UserList\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport interface UserListContextsType<User> {\n  Fragment: React.Context<{\n    headerTitle: string;\n    headerRight: string;\n  }>;\n  List: React.Context<{\n    selectedUsers: User[];\n    setSelectedUsers: React.Dispatch<React.SetStateAction<User[]>>;\n  }>;\n}\n\nexport interface UserListModule<User> {\n  Provider: CommonComponent<UserListProps<User>['Provider']>;\n  Header: CommonComponent<UserListProps<User>['Header']>;\n  List: CommonComponent<UserListProps<User>['List']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n  StatusError: CommonComponent<UserListProps<User>['StatusError']>;\n}\n"],"mappings":""}