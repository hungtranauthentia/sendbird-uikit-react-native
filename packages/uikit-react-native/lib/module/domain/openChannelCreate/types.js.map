{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\n\nimport type { OnBeforeHandler, SendbirdOpenChannel, SendbirdOpenChannelCreateParams } from '@sendbird/uikit-utils';\n\nimport type { FileType } from '../../platform/types';\nimport type { CommonComponent } from '../../types';\n\nexport type OpenChannelCreateProps = {\n  Fragment: {\n    onPressHeaderLeft: OpenChannelCreateProps['Header']['onPressHeaderLeft'];\n    onCreateChannel: (channel: SendbirdOpenChannel) => void;\n    onBeforeCreateChannel?: OnBeforeHandler<SendbirdOpenChannelCreateParams>;\n  };\n  Header: {\n    onPressHeaderLeft: () => void;\n    onPressHeaderRight: () => void;\n    shouldActivateHeaderRight: () => boolean;\n  };\n  ProfileInput: {\n    channelName: string;\n    onChangeChannelName: (val: OpenChannelCreateProps['ProfileInput']['channelName']) => void;\n    channelCoverFile: FileType | undefined;\n    onChangeChannelCoverFile: (val: OpenChannelCreateProps['ProfileInput']['channelCoverFile']) => void;\n  };\n};\n\n/**\n * Internal context for OpenChannelCreate\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport type OpenChannelCreateContextsType = {\n  Fragment: React.Context<{\n    headerTitle: string;\n    headerRight: string;\n  }>;\n};\nexport interface OpenChannelCreateModule {\n  Provider: CommonComponent;\n  Header: CommonComponent<OpenChannelCreateProps['Header']>;\n  ProfileInput: CommonComponent<OpenChannelCreateProps['ProfileInput']>;\n  StatusLoading: CommonComponent;\n}\n\nexport type OpenChannelCreateFragment = React.FC<OpenChannelCreateProps['Fragment']>;\n"],"mappings":""}