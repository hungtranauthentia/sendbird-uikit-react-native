{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\nimport type { FlatListProps } from 'react-native';\n\nimport type { GroupChannelCollectionParams, GroupChannelFilterParams } from '@sendbird/chat/groupChannel';\nimport type { UseGroupChannelListOptions } from '@sendbird/uikit-chat-hooks';\nimport type { ActionMenuItem } from '@sendbird/uikit-react-native-foundation';\nimport type { SendbirdGroupChannel } from '@sendbird/uikit-utils';\n\nimport type { CommonComponent } from '../../types';\n\nexport type ChannelListQueryParamsType = Omit<GroupChannelCollectionParams, 'filter'> & GroupChannelFilterParams;\nexport interface GroupChannelListProps {\n  Fragment: {\n    onPressChannel: GroupChannelListProps['List']['onPressChannel'];\n    onPressCreateChannel: (channelType: GroupChannelType) => void;\n    renderGroupChannelPreview?: GroupChannelListProps['List']['renderGroupChannelPreview'];\n    skipTypeSelection?: boolean;\n    flatListProps?: GroupChannelListProps['List']['flatListProps'];\n    menuItemCreator?: GroupChannelListProps['List']['menuItemCreator'];\n    /**\n     * @description You can specify the query parameters for the channel list.\n     * @example\n     * ```\n     * <GroupChannelListFragment channelListQueryParams={{ limit: 20, includeEmpty: false }} />\n     * ```\n     * */\n    channelListQueryParams?: ChannelListQueryParamsType;\n    /** @deprecated Please use `channelListQueryParams` instead */\n    collectionCreator?: UseGroupChannelListOptions['collectionCreator'];\n  };\n  Header: {};\n  List: {\n    onPressChannel: (channel: SendbirdGroupChannel) => void;\n    groupChannels: SendbirdGroupChannel[];\n    renderGroupChannelPreview: (props: {\n      channel: SendbirdGroupChannel;\n      onPress: () => void;\n      onLongPress: () => void;\n    }) => React.ReactElement | null;\n    onLoadNext: () => Promise<void>;\n    flatListProps?: Omit<FlatListProps<SendbirdGroupChannel>, 'data' | 'renderItem'>;\n    menuItemCreator?: (defaultMenuItem: ActionMenuItem) => ActionMenuItem;\n  };\n  TypeSelector: {\n    skipTypeSelection: boolean;\n    onSelectType: (type: GroupChannelType) => void;\n  };\n}\n\n/**\n * Internal context for GroupChannelList\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport interface GroupChannelListContextsType {\n  Fragment: React.Context<{\n    headerTitle: string;\n  }>;\n  TypeSelector: React.Context<{\n    visible: boolean;\n    show: () => void;\n    hide: () => void;\n    headerTitle: string;\n  }>;\n}\nexport interface GroupChannelListModule {\n  Provider: CommonComponent;\n  Header: CommonComponent<GroupChannelListProps['Header']>;\n  List: CommonComponent<GroupChannelListProps['List']>;\n  TypeSelector: CommonComponent<GroupChannelListProps['TypeSelector']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n}\n\nexport type GroupChannelListFragment = React.FC<GroupChannelListProps['Fragment']>;\nexport type GroupChannelType = 'GROUP' | 'SUPER_GROUP' | 'BROADCAST';\n"],"mappings":""}