{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\n\nimport type { UseUserListOptions } from '@sendbird/uikit-chat-hooks';\nimport type { SendbirdOpenChannel, SendbirdRestrictedUser } from '@sendbird/uikit-utils';\n\nimport type { CommonComponent } from '../../types';\n\nexport type OpenChannelBannedUsersProps = {\n  Fragment: {\n    channel: SendbirdOpenChannel;\n    onPressHeaderLeft: OpenChannelBannedUsersProps['Header']['onPressHeaderLeft'];\n    renderUser?: OpenChannelBannedUsersProps['List']['renderUser'];\n    queryCreator?: UseUserListOptions<SendbirdRestrictedUser>['queryCreator'];\n  };\n  Header: {\n    onPressHeaderLeft: () => void;\n  };\n  List: {\n    renderUser: (props: { user: SendbirdRestrictedUser }) => React.ReactElement | null;\n    bannedUsers: SendbirdRestrictedUser[];\n    ListEmptyComponent?: React.ReactElement;\n    onLoadNext: () => Promise<void>;\n  };\n  StatusError: {\n    onPressRetry: () => void;\n  };\n  Provider: {\n    channel: SendbirdOpenChannel;\n  };\n};\n\n/**\n * Internal context for OpenChannelBannedUsers\n * For example, the developer can create a custom header\n * with getting data from the domain context\n * */\nexport type OpenChannelBannedUsersContextsType = {\n  Fragment: React.Context<{\n    headerTitle: string;\n    channel: SendbirdOpenChannel;\n  }>;\n};\nexport interface OpenChannelBannedUsersModule {\n  Provider: CommonComponent<OpenChannelBannedUsersProps['Provider']>;\n  Header: CommonComponent<OpenChannelBannedUsersProps['Header']>;\n  List: CommonComponent<OpenChannelBannedUsersProps['List']>;\n  StatusEmpty: CommonComponent;\n  StatusLoading: CommonComponent;\n  StatusError: CommonComponent<OpenChannelBannedUsersProps['StatusError']>;\n}\n\nexport type OpenChannelBannedUsersFragment = React.FC<OpenChannelBannedUsersProps['Fragment']>;\n"],"mappings":""}