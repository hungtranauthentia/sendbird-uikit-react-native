{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type { ReactNode } from 'react';\n\nimport type SBUError from '../libs/SBUError';\n\nexport type Unsubscribe = () => void | undefined;\nexport type DownloadedPath = string;\nexport type FilePickerResponse = FileType | null;\n\n/**\n * We are following the file format of react-native FormData\n * @see https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Network/FormData.js#L37-L41\n * */\nexport type FileType = { name: string; uri: string; size: number; type: string };\n\n// ---------- NotificationService ---------- //\nexport interface NotificationServiceInterface {\n  hasPushPermission(): Promise<boolean>;\n  requestPushPermission(): Promise<boolean>;\n\n  getAPNSToken(): Promise<string | null>;\n  getFCMToken(): Promise<string | null>;\n  onTokenRefresh(handler: (token: string) => void): Unsubscribe;\n}\n\n// ---------- ClipboardService ---------- //\nexport interface ClipboardServiceInterface {\n  setString(text: string): void;\n  getString(): Promise<string>;\n}\n\n// ---------- FileService ---------- //\nexport interface FileServiceInterface extends FilePickerServiceInterface, FileSystemServiceInterface {}\n\nexport interface OpenResultListener {\n  onOpenFailure?: (error: SBUError, originError?: unknown) => void;\n}\nexport interface OpenMediaLibraryOptions extends OpenResultListener {\n  selectionLimit?: number;\n  mediaType?: 'photo' | 'video' | 'all';\n}\nexport interface OpenCameraOptions extends OpenResultListener {\n  cameraType?: 'front' | 'back';\n  mediaType?: 'photo' | 'video' | 'all';\n}\nexport type OpenDocumentOptions = OpenResultListener;\nexport interface SaveOptions {\n  fileUrl: string;\n  fileName: string;\n  fileType?: string | null;\n}\n\nexport interface FilePickerServiceInterface {\n  openMediaLibrary(options?: OpenMediaLibraryOptions): Promise<null | FilePickerResponse[]>;\n  openCamera(options?: OpenCameraOptions): Promise<FilePickerResponse>;\n  openDocument(options?: OpenDocumentOptions): Promise<FilePickerResponse>;\n}\n\nexport interface FileSystemServiceInterface {\n  // NOTE: On iOS, You can access the downloaded files by providing options below to info.plist\n  // - Supports opening documents in place\n  // - Application supports iTunes file sharing\n  save(options?: SaveOptions): Promise<DownloadedPath | null>;\n  createRecordFilePath(customExtension?: string): { recordFilePath: string; uri: string };\n}\n\n// ---------- MediaService ---------- //\nexport type VideoProps = {\n  source: { uri: string } | number;\n  resizeMode?: 'cover' | 'contain' | 'stretch';\n  onLoad?: () => void;\n};\n\nexport type GetVideoThumbnailOptions = {\n  url: string;\n  timeMills?: number;\n  quality?: number;\n};\nexport type GetVideoThumbnailResult = Promise<{ path: string } | null>;\n\nexport type CompressImageOptions = {\n  /**\n   * A uri of image file to compress\n   * */\n  uri: string;\n\n  /**\n   * A resize width, apply only to downscale\n   * */\n  maxWidth?: number;\n\n  /**\n   * A resize height, apply only to downscale\n   * */\n  maxHeight?: number;\n\n  /**\n   * A value in range 0.0 - 1.0 specifying compression level of the result image.\n   * 1 means highest quality and 0 the lowest quality.\n   * */\n  compressionRate?: number;\n};\nexport type CompressImageResult = Promise<{ uri: string; size: number } | null>;\n\nexport interface MediaServiceInterface {\n  VideoComponent<Props = {}>(props: VideoProps & Props): ReactNode;\n  getVideoThumbnail(options: GetVideoThumbnailOptions): GetVideoThumbnailResult;\n  compressImage(options: CompressImageOptions): CompressImageResult;\n}\n\n// ---------- PlayerService ---------- //\nexport interface PlayerServiceInterface {\n  uri?: string;\n  state: 'idle' | 'preparing' | 'playing' | 'paused' | 'stopped';\n\n  /**\n   * Check and request permission for the player.\n   * */\n  requestPermission(): Promise<boolean>;\n\n  /**\n   * Add a playback listener.\n   * */\n  addPlaybackListener(\n    callback: (params: { currentTime: number; duration: number; stopped: boolean }) => void,\n  ): Unsubscribe;\n\n  /**\n   * Add a state listener.\n   * */\n  addStateListener(callback: (state: PlayerServiceInterface['state']) => void): Unsubscribe;\n\n  /**\n   * State transition:\n   *   [idle, stopped] to [playing] - start from the beginning\n   *   [paused] to [playing] - resume\n   * */\n  play(uri: string): Promise<void>;\n\n  /**\n   * State transition:\n   *   [playing] to [paused]\n   * */\n  pause(): Promise<void>;\n\n  /**\n   * State transition:\n   *   [preparing, playing, paused] to [stop]\n   * */\n  stop(): Promise<void>;\n\n  /**\n   * State transition:\n   *   [*] to [idle]\n   * */\n  reset(): Promise<void>;\n\n  /**\n   * Seek time, only available when the state is [playing, paused].\n   * */\n  seek(time: number): Promise<void>;\n}\n\n// ---------- RecorderService ---------- //\nexport interface RecorderOptions {\n  /**\n   * Minimum recording duration (milliseconds).\n   * */\n  minDuration: number;\n\n  /**\n   * Maximum recording duration (milliseconds).\n   * */\n  maxDuration: number;\n\n  /**\n   * File extension for recorded audio file\n   * */\n  extension: string;\n}\n\nexport interface RecorderServiceInterface {\n  uri?: string;\n  options: RecorderOptions;\n  state: 'idle' | 'preparing' | 'recording' | 'completed';\n\n  /**\n   * Check and request permission for the recorder.\n   * */\n  requestPermission(): Promise<boolean>;\n\n  /**\n   * Add recording listener.\n   * */\n  addRecordingListener(callback: (params: { currentTime: number; completed: boolean }) => void): Unsubscribe;\n\n  /**\n   * Add state listener.\n   * */\n  addStateListener(callback: (state: RecorderServiceInterface['state']) => void): Unsubscribe;\n\n  /**\n   * State transition:\n   *   [idle, completed] to [recording]\n   * */\n  record(uri?: string): Promise<void>;\n\n  /**\n   * State transition:\n   *   [recording] to [completed]\n   * */\n  stop(): Promise<void>;\n\n  /**\n   * State transition:\n   *   [*] to [idle]\n   * */\n  reset(): Promise<void>;\n}\n"],"mappings":""}