{"version":3,"names":["React","useOpenChannelList","OpenChannelPreview","PressBox","NOOP","StatusComposition","createOpenChannelListModule","useLocalization","useSendbirdChat","createOpenChannelListFragment","initModule","OpenChannelListModule","_ref","onPressCreateChannel","onPressChannel","flatListProps","renderOpenChannelPreview","queryCreator","sdk","currentUser","STRINGS","openChannels","next","refresh","refreshing","loading","error","userId","_renderOpenChannelPreview","props","createElement","activeOpacity","onPress","coverUrl","channel","title","OPEN_CHANNEL_LIST","CHANNEL_PREVIEW_TITLE","frozen","isFrozen","participantsCount","participantCount","Provider","Header","onPressHeaderRight","LoadingComponent","StatusLoading","Boolean","ErrorComponent","StatusError","onPressRetry","List","onLoadNext","onRefresh","ListEmptyComponent","StatusEmpty","contentContainerStyle","flexGrow"],"sources":["createOpenChannelListFragment.tsx"],"sourcesContent":["import React from 'react';\n\nimport { useOpenChannelList } from '@sendbird/uikit-chat-hooks';\nimport { OpenChannelPreview, PressBox } from '@sendbird/uikit-react-native-foundation';\nimport { NOOP } from '@sendbird/uikit-utils';\n\nimport StatusComposition from '../components/StatusComposition';\nimport { createOpenChannelListModule } from '../domain/openChannelList';\nimport type {\n  OpenChannelListFragment,\n  OpenChannelListModule,\n  OpenChannelListProps,\n} from '../domain/openChannelList/types';\nimport { useLocalization, useSendbirdChat } from '../hooks/useContext';\n\nconst createOpenChannelListFragment = (initModule?: Partial<OpenChannelListModule>): OpenChannelListFragment => {\n  const OpenChannelListModule = createOpenChannelListModule(initModule);\n\n  return ({ onPressCreateChannel, onPressChannel = NOOP, flatListProps, renderOpenChannelPreview, queryCreator }) => {\n    const { sdk, currentUser } = useSendbirdChat();\n    const { STRINGS } = useLocalization();\n    const { openChannels, next, refresh, refreshing, loading, error } = useOpenChannelList(sdk, currentUser?.userId, {\n      queryCreator,\n    });\n\n    const _renderOpenChannelPreview: OpenChannelListProps['List']['renderOpenChannelPreview'] = (props) => {\n      if (renderOpenChannelPreview) return renderOpenChannelPreview(props);\n      return (\n        <PressBox activeOpacity={0.8} onPress={props.onPress}>\n          <OpenChannelPreview\n            coverUrl={props.channel.coverUrl}\n            title={STRINGS.OPEN_CHANNEL_LIST.CHANNEL_PREVIEW_TITLE(props.channel)}\n            frozen={props.channel.isFrozen}\n            participantsCount={props.channel.participantCount}\n          />\n        </PressBox>\n      );\n    };\n\n    return (\n      <OpenChannelListModule.Provider>\n        <OpenChannelListModule.Header onPressHeaderRight={onPressCreateChannel} />\n        <StatusComposition\n          loading={loading}\n          LoadingComponent={<OpenChannelListModule.StatusLoading />}\n          error={Boolean(error)}\n          ErrorComponent={<OpenChannelListModule.StatusError onPressRetry={refresh} />}\n        >\n          <OpenChannelListModule.List\n            onPressChannel={onPressChannel}\n            renderOpenChannelPreview={_renderOpenChannelPreview}\n            openChannels={openChannels}\n            onLoadNext={next}\n            refreshing={refreshing}\n            onRefresh={refresh}\n            flatListProps={{\n              ListEmptyComponent: <OpenChannelListModule.StatusEmpty />,\n              contentContainerStyle: { flexGrow: 1 },\n              ...flatListProps,\n            }}\n          />\n        </StatusComposition>\n      </OpenChannelListModule.Provider>\n    );\n  };\n};\n\nexport default createOpenChannelListFragment;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,SAASC,kBAAkB,EAAEC,QAAQ,QAAQ,yCAAyC;AACtF,SAASC,IAAI,QAAQ,uBAAuB;AAE5C,OAAOC,iBAAiB,MAAM,iCAAiC;AAC/D,SAASC,2BAA2B,QAAQ,2BAA2B;AAMvE,SAASC,eAAe,EAAEC,eAAe,QAAQ,qBAAqB;AAEtE,MAAMC,6BAA6B,GAAIC,UAA2C,IAA8B;EAC9G,MAAMC,qBAAqB,GAAGL,2BAA2B,CAACI,UAAU,CAAC;EAErE,OAAOE,IAAA,IAA4G;IAAA,IAA3G;MAAEC,oBAAoB;MAAEC,cAAc,GAAGV,IAAI;MAAEW,aAAa;MAAEC,wBAAwB;MAAEC;IAAa,CAAC,GAAAL,IAAA;IAC5G,MAAM;MAAEM,GAAG;MAAEC;IAAY,CAAC,GAAGX,eAAe,EAAE;IAC9C,MAAM;MAAEY;IAAQ,CAAC,GAAGb,eAAe,EAAE;IACrC,MAAM;MAAEc,YAAY;MAAEC,IAAI;MAAEC,OAAO;MAAEC,UAAU;MAAEC,OAAO;MAAEC;IAAM,CAAC,GAAGzB,kBAAkB,CAACiB,GAAG,EAAEC,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEQ,MAAM,EAAE;MAC/GV;IACF,CAAC,CAAC;IAEF,MAAMW,yBAAmF,GAAIC,KAAK,IAAK;MACrG,IAAIb,wBAAwB,EAAE,OAAOA,wBAAwB,CAACa,KAAK,CAAC;MACpE,oBACE7B,KAAA,CAAA8B,aAAA,CAAC3B,QAAQ;QAAC4B,aAAa,EAAE,GAAI;QAACC,OAAO,EAAEH,KAAK,CAACG;MAAQ,gBACnDhC,KAAA,CAAA8B,aAAA,CAAC5B,kBAAkB;QACjB+B,QAAQ,EAAEJ,KAAK,CAACK,OAAO,CAACD,QAAS;QACjCE,KAAK,EAAEf,OAAO,CAACgB,iBAAiB,CAACC,qBAAqB,CAACR,KAAK,CAACK,OAAO,CAAE;QACtEI,MAAM,EAAET,KAAK,CAACK,OAAO,CAACK,QAAS;QAC/BC,iBAAiB,EAAEX,KAAK,CAACK,OAAO,CAACO;MAAiB,EAClD,CACO;IAEf,CAAC;IAED,oBACEzC,KAAA,CAAA8B,aAAA,CAACnB,qBAAqB,CAAC+B,QAAQ,qBAC7B1C,KAAA,CAAA8B,aAAA,CAACnB,qBAAqB,CAACgC,MAAM;MAACC,kBAAkB,EAAE/B;IAAqB,EAAG,eAC1Eb,KAAA,CAAA8B,aAAA,CAACzB,iBAAiB;MAChBoB,OAAO,EAAEA,OAAQ;MACjBoB,gBAAgB,eAAE7C,KAAA,CAAA8B,aAAA,CAACnB,qBAAqB,CAACmC,aAAa,OAAI;MAC1DpB,KAAK,EAAEqB,OAAO,CAACrB,KAAK,CAAE;MACtBsB,cAAc,eAAEhD,KAAA,CAAA8B,aAAA,CAACnB,qBAAqB,CAACsC,WAAW;QAACC,YAAY,EAAE3B;MAAQ;IAAI,gBAE7EvB,KAAA,CAAA8B,aAAA,CAACnB,qBAAqB,CAACwC,IAAI;MACzBrC,cAAc,EAAEA,cAAe;MAC/BE,wBAAwB,EAAEY,yBAA0B;MACpDP,YAAY,EAAEA,YAAa;MAC3B+B,UAAU,EAAE9B,IAAK;MACjBE,UAAU,EAAEA,UAAW;MACvB6B,SAAS,EAAE9B,OAAQ;MACnBR,aAAa,EAAE;QACbuC,kBAAkB,eAAEtD,KAAA,CAAA8B,aAAA,CAACnB,qBAAqB,CAAC4C,WAAW,OAAG;QACzDC,qBAAqB,EAAE;UAAEC,QAAQ,EAAE;QAAE,CAAC;QACtC,GAAG1C;MACL;IAAE,EACF,CACgB,CACW;EAErC,CAAC;AACH,CAAC;AAED,eAAeN,6BAA6B"}