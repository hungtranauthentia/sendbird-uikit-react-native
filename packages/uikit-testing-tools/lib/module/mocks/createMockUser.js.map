{"version":3,"names":["UserOnlineState","createTestContext","tc","createMockUser","params","MockUser","constructor","_defineProperty","getHash","OFFLINE","date","increment","increaseIncrement","Object","assign","profileUrl","Error","serialize","createMetaData","updateMetaData","deleteMetaData","deleteAllMetaData","asParticipant","asMember","asAdminMessage","asSender"],"sources":["createMockUser.ts"],"sourcesContent":["// @ts-nocheck\nimport { UserOnlineState } from '@sendbird/chat';\nimport type { Sender } from '@sendbird/chat/message';\nimport type {\n  SendbirdAdminMessage,\n  SendbirdMember,\n  SendbirdParticipant,\n  SendbirdUser,\n  SendbirdUserMessage,\n} from '@sendbird/uikit-utils';\n\nimport type { GetMockParams } from '../types';\nimport { createTestContext } from '../utils/createTestContext';\n\nconst tc = createTestContext();\n\ntype Params = GetMockParams<Sender & SendbirdUserMessage & SendbirdParticipant & SendbirdMember>;\n\nexport const createMockUser = (params: Params) => {\n  return new MockUser(params);\n};\n\nclass MockUser implements SendbirdUser {\n  constructor(public params: Params) {\n    tc.increaseIncrement();\n    Object.assign(this, params);\n  }\n\n  userId: string = 'user_id_' + tc.getHash();\n  requireAuth = true;\n  nickname = 'nickname_' + tc.getHash();\n  plainProfileUrl = 'profile_url_' + tc.getHash();\n  metaData: object = {};\n  connectionStatus: UserOnlineState = UserOnlineState.OFFLINE;\n  isActive = false;\n  lastSeenAt = tc.date + tc.increment;\n  preferredLanguages: string[] = [];\n  friendDiscoveryKey = tc.getHash();\n  friendName = 'friend_name_' + tc.getHash();\n\n  get profileUrl(): string {\n    throw new Error('Method not implemented.');\n  }\n  serialize(): object {\n    throw new Error('Method not implemented.');\n  }\n  createMetaData(): Promise<object> {\n    throw new Error('Method not implemented.');\n  }\n  updateMetaData(): Promise<object> {\n    throw new Error('Method not implemented.');\n  }\n  deleteMetaData(): Promise<object> {\n    throw new Error('Method not implemented.');\n  }\n  deleteAllMetaData(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  asParticipant(): SendbirdParticipant {\n    return this as unknown as SendbirdParticipant;\n  }\n  asMember(): SendbirdMember {\n    return this as unknown as SendbirdMember;\n  }\n  asAdminMessage(): SendbirdAdminMessage {\n    return this as unknown as SendbirdAdminMessage;\n  }\n  asSender(): Sender {\n    return this as unknown as Sender;\n  }\n}\n"],"mappings":";;;AAAA;AACA,SAASA,eAAe,QAAQ,gBAAgB;AAWhD,SAASC,iBAAiB,QAAQ,4BAA4B;AAE9D,MAAMC,EAAE,GAAGD,iBAAiB,EAAE;AAI9B,OAAO,MAAME,cAAc,GAAIC,MAAc,IAAK;EAChD,OAAO,IAAIC,QAAQ,CAACD,MAAM,CAAC;AAC7B,CAAC;AAED,MAAMC,QAAQ,CAAyB;EACrCC,WAAWA,CAAQF,MAAc,EAAE;IAAA,KAAhBA,MAAc,GAAdA,MAAc;IAAAG,eAAA,iBAKhB,UAAU,GAAGL,EAAE,CAACM,OAAO,EAAE;IAAAD,eAAA,sBAC5B,IAAI;IAAAA,eAAA,mBACP,WAAW,GAAGL,EAAE,CAACM,OAAO,EAAE;IAAAD,eAAA,0BACnB,cAAc,GAAGL,EAAE,CAACM,OAAO,EAAE;IAAAD,eAAA,mBAC5B,CAAC,CAAC;IAAAA,eAAA,2BACeP,eAAe,CAACS,OAAO;IAAAF,eAAA,mBAChD,KAAK;IAAAA,eAAA,qBACHL,EAAE,CAACQ,IAAI,GAAGR,EAAE,CAACS,SAAS;IAAAJ,eAAA,6BACJ,EAAE;IAAAA,eAAA,6BACZL,EAAE,CAACM,OAAO,EAAE;IAAAD,eAAA,qBACpB,cAAc,GAAGL,EAAE,CAACM,OAAO,EAAE;IAdxCN,EAAE,CAACU,iBAAiB,EAAE;IACtBC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEV,MAAM,CAAC;EAC7B;EAcA,IAAIW,UAAUA,CAAA,EAAW;IACvB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAC,SAASA,CAAA,EAAW;IAClB,MAAM,IAAID,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAE,cAAcA,CAAA,EAAoB;IAChC,MAAM,IAAIF,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAG,cAAcA,CAAA,EAAoB;IAChC,MAAM,IAAIH,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAI,cAAcA,CAAA,EAAoB;IAChC,MAAM,IAAIJ,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACAK,iBAAiBA,CAAA,EAAkB;IACjC,MAAM,IAAIL,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEAM,aAAaA,CAAA,EAAwB;IACnC,OAAO,IAAI;EACb;EACAC,QAAQA,CAAA,EAAmB;IACzB,OAAO,IAAI;EACb;EACAC,cAAcA,CAAA,EAAyB;IACrC,OAAO,IAAI;EACb;EACAC,QAAQA,CAAA,EAAW;IACjB,OAAO,IAAI;EACb;AACF"}