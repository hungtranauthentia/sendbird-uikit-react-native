{"version":3,"names":["ChannelType","PushTriggerOption","ApplicationAttributes","PremiumFeatures","createTestContext","createMockChannel","createMockGroupChannelCollection","createMockQuery","createMockUser","tc","defaultParams","testType","userId","getHash","appInfo","emojiHash","uploadSizeLimit","useReaction","applicationAttributes","Object","values","premiumFeatureList","enabledChannelMemberShipHistory","localCacheEnabled","createMockSendbirdChat","params","arguments","length","undefined","MockSDK","asMockSendbirdChatSDK","__emit","_len","_ref","Array","_key","name","type","args","startsWith","eventName","replace","__context","openChannelHandlers","forEach","handler","_handler$eventName","call","groupChannelHandlers","_handler$eventName2","connectionHandlers","_handler$eventName3","userEventHandlers","_handler$eventName4","__throwIfFailureTest","__params","Error","isCacheEnabled","constructor","_defineProperty","groupChannels","openChannels","groupChannelCollections","groupChannelCollectionHandlers","groupChannelMessageCollectionHandlers","pushTriggerOption","DEFAULT","jest","fn","id","option","currentUser","limit","dataLength","sdk","createMyGroupChannelListQuery","createGroupChannelCollection","gcc","push","getChannel","url","channelInContext","find","it","channel","channelType","GROUP","asGroupChannel","addGroupChannelHandler","removeGroupChannelHandler","getTotalUnreadMessageCount","getTotalUnreadChannelCount","OPEN","asOpenChannel","addOpenChannelHandler","removeOpenChannelHandler","createOpenChannelListQuery"],"sources":["createMockSendbirdSDK.ts"],"sourcesContent":["// @ts-nocheck\nimport {\n  ApplicationUserListQueryParams,\n  ChannelType,\n  ConnectionHandler,\n  PushTriggerOption,\n  UserEventHandler,\n} from '@sendbird/chat';\nimport type {\n  GroupChannelCollectionEventHandler,\n  GroupChannelCollectionParams,\n  GroupChannelHandler,\n  GroupChannelListQueryParams,\n  MessageCollectionEventHandler,\n} from '@sendbird/chat/groupChannel';\nimport type {\n  AppInfo,\n  ConnectionHandlerParams,\n  GroupChannelHandlerParams,\n  OpenChannelHandlerParams,\n  UserEventHandlerParams,\n} from '@sendbird/chat/lib/__definition';\nimport type { OpenChannelHandler, OpenChannelListQueryParams } from '@sendbird/chat/openChannel';\nimport type {\n  SendbirdChatSDK,\n  SendbirdGroupChannel,\n  SendbirdGroupChannelCollection,\n  SendbirdOpenChannel,\n} from '@sendbird/uikit-utils';\nimport { ApplicationAttributes, PremiumFeatures } from '@sendbird/uikit-utils';\n\nimport { createTestContext } from '../utils/createTestContext';\nimport { createMockChannel } from './createMockChannel';\nimport { createMockGroupChannelCollection } from './createMockGroupChannelCollection';\nimport { createMockQuery } from './createMockQuery';\nimport { createMockUser } from './createMockUser';\n\nconst tc = createTestContext();\n\nexport interface MockSendbirdChatSDK extends SendbirdChatSDK {\n  __emit(\n    type: 'channel' | 'connection' | 'userEvent',\n    name:\n      | `group_${keyof GroupChannelHandlerParams}`\n      | `open_${keyof OpenChannelHandlerParams}`\n      | keyof ConnectionHandlerParams\n      | keyof UserEventHandlerParams,\n    ...args: unknown[]\n  ): void;\n  __context: {\n    openChannels: SendbirdOpenChannel[];\n    groupChannels: SendbirdGroupChannel[];\n    groupChannelCollections: SendbirdGroupChannelCollection[];\n    groupChannelHandlers: Record<string, GroupChannelHandler>;\n    openChannelHandlers: Record<string, OpenChannelHandler>;\n    connectionHandlers: Record<string, ConnectionHandler>;\n    userEventHandlers: Record<string, UserEventHandler>;\n    groupChannelCollectionHandlers: Record<string, GroupChannelCollectionEventHandler>;\n    groupChannelMessageCollectionHandlers: Record<string, Record<string, MessageCollectionEventHandler>>;\n    appInfo: AppInfo;\n    localCacheEnabled: boolean;\n  };\n  __params: InitParams;\n  __throwIfFailureTest(): void;\n}\n\ntype InitParams = {\n  testType?: 'success' | 'failure';\n  userId?: string;\n  appInfo?: Partial<AppInfo>;\n  localCacheEnabled?: boolean;\n};\n\nconst defaultParams: Required<InitParams> = {\n  testType: 'success',\n  userId: 'user_id_' + tc.getHash(),\n  appInfo: {\n    emojiHash: 'hash',\n    uploadSizeLimit: 999999,\n    useReaction: true,\n    applicationAttributes: Object.values(ApplicationAttributes),\n    premiumFeatureList: Object.values(PremiumFeatures),\n    enabledChannelMemberShipHistory: false,\n  },\n  localCacheEnabled: false,\n};\n\nexport const createMockSendbirdChat = (params: InitParams = defaultParams): MockSendbirdChatSDK => {\n  return new MockSDK(params).asMockSendbirdChatSDK();\n};\n\n// @ts-ignore\n\nclass MockSDK implements MockSendbirdChatSDK {\n  __params = defaultParams;\n  __context = {\n    groupChannels: [] as SendbirdGroupChannel[],\n    openChannels: [] as SendbirdOpenChannel[],\n    groupChannelCollections: [] as SendbirdGroupChannelCollection[],\n    groupChannelHandlers: {} as Record<string, GroupChannelHandler>,\n    openChannelHandlers: {} as Record<string, OpenChannelHandler>,\n    connectionHandlers: {} as Record<string, ConnectionHandler>,\n    userEventHandlers: {} as Record<string, UserEventHandler>,\n    groupChannelCollectionHandlers: {} as Record<string, GroupChannelCollectionEventHandler>,\n    groupChannelMessageCollectionHandlers: {} as Record<string, Record<string, MessageCollectionEventHandler>>,\n    pushTriggerOption: PushTriggerOption.DEFAULT,\n    appInfo: this.__params.appInfo as AppInfo,\n    localCacheEnabled: this.__params.localCacheEnabled,\n  };\n\n  __emit(...[name, type, ...args]: Parameters<MockSendbirdChatSDK['__emit']>) {\n    switch (name) {\n      case 'channel': {\n        if (type.startsWith('open_')) {\n          const eventName = type.replace('open_', '') as keyof OpenChannelHandlerParams;\n          Object.values(this.__context.openChannelHandlers).forEach((handler) => {\n            // @ts-ignore\n            handler[eventName]?.(...args);\n          });\n        }\n        if (type.startsWith('group_')) {\n          const eventName = type.replace('group_', '') as keyof GroupChannelHandlerParams;\n          Object.values(this.__context.groupChannelHandlers).forEach((handler) => {\n            // @ts-ignore\n            handler[eventName]?.(...args);\n          });\n        }\n        break;\n      }\n      case 'connection': {\n        const eventName = type as keyof ConnectionHandlerParams;\n        Object.values(this.__context.connectionHandlers).forEach((handler) => {\n          // @ts-ignore\n          handler[eventName]?.(...args);\n        });\n        break;\n      }\n      case 'userEvent': {\n        const eventName = type as keyof UserEventHandlerParams;\n        Object.values(this.__context.userEventHandlers).forEach((handler) => {\n          // @ts-ignore\n          handler[eventName]?.(...args);\n        });\n        break;\n      }\n    }\n  }\n  __throwIfFailureTest() {\n    if (this.__params.testType === 'failure') throw new Error('Failure test');\n  }\n\n  currentUser = createMockUser(this.__params);\n  addConnectionHandler = jest.fn((id: string, handler: ConnectionHandler) => {\n    this.__context.connectionHandlers[id] = handler;\n  });\n  removeConnectionHandler = jest.fn((id: string) => {\n    delete this.__context.connectionHandlers[id];\n  });\n  addUserEventHandler = jest.fn((id: string, handler: UserEventHandler) => {\n    this.__context.userEventHandlers[id] = handler;\n  });\n  removeUserEventHandler = jest.fn((id: string) => {\n    delete this.__context.userEventHandlers[id];\n  });\n  setPushTriggerOption = jest.fn(async (option: PushTriggerOption) => {\n    this.__throwIfFailureTest();\n    this.__context.pushTriggerOption = option;\n    return this.__context.pushTriggerOption;\n  });\n  getPushTriggerOption = jest.fn(async () => {\n    this.__throwIfFailureTest();\n    return this.__context.pushTriggerOption;\n  });\n\n  connect = jest.fn(async () => {\n    this.__throwIfFailureTest();\n    this.__emit('connection', 'onReconnectStarted');\n    this.__emit('connection', 'onReconnectSucceeded');\n    return this.currentUser;\n  });\n  createApplicationUserListQuery = jest.fn((params?: ApplicationUserListQueryParams) => {\n    return createMockQuery({ type: 'user', limit: params?.limit, dataLength: 200, sdk: this.asMockSendbirdChatSDK() });\n  }) as unknown as SendbirdChatSDK['createApplicationUserListQuery'];\n  get appInfo() {\n    return this.__context.appInfo;\n  }\n  get isCacheEnabled() {\n    return this.__context.localCacheEnabled;\n  }\n\n  groupChannel = {\n    createMyGroupChannelListQuery: jest.fn((params?: GroupChannelListQueryParams) => {\n      return createMockQuery({\n        type: 'groupChannel',\n        limit: params?.limit,\n        dataLength: 200,\n        sdk: this.asMockSendbirdChatSDK(),\n      });\n    }),\n    createGroupChannelCollection: jest.fn((params?: GroupChannelCollectionParams) => {\n      this.__throwIfFailureTest();\n\n      const gcc = createMockGroupChannelCollection({ ...params, sdk: this.asMockSendbirdChatSDK() });\n      this.__context.groupChannelCollections.push(gcc);\n      return gcc;\n    }),\n    getChannel: jest.fn(async (url: string) => {\n      this.__throwIfFailureTest();\n\n      const channelInContext = this.__context.groupChannels.find((it) => it.url === url);\n      if (channelInContext) {\n        return channelInContext;\n      } else {\n        const channel = createMockChannel({\n          channelType: ChannelType.GROUP,\n          url,\n          sdk: this.asMockSendbirdChatSDK(),\n        }).asGroupChannel();\n        this.__context.groupChannels.push(channel);\n        return channel;\n      }\n    }),\n    addGroupChannelHandler: jest.fn((id: string, handler: GroupChannelHandler) => {\n      this.__context.groupChannelHandlers[id] = handler;\n    }),\n    removeGroupChannelHandler: jest.fn((id: string) => {\n      delete this.__context.groupChannelHandlers[id];\n    }),\n    getTotalUnreadMessageCount: jest.fn(() => {\n      return 10;\n    }),\n    getTotalUnreadChannelCount: jest.fn(() => {\n      return 10;\n    }),\n  } as unknown as SendbirdChatSDK['groupChannel'];\n\n  openChannel = {\n    getChannel: jest.fn(async (url: string) => {\n      this.__throwIfFailureTest();\n\n      const channelInContext = this.__context.openChannels.find((it) => it.url === url);\n      if (channelInContext) {\n        return channelInContext;\n      } else {\n        const channel = createMockChannel({\n          channelType: ChannelType.OPEN,\n          url,\n          sdk: this.asMockSendbirdChatSDK(),\n        }).asOpenChannel();\n        this.__context.openChannels.push(channel);\n        return channel;\n      }\n    }),\n    addOpenChannelHandler: jest.fn((id: string, handler: OpenChannelHandler) => {\n      this.__context.openChannelHandlers[id] = handler;\n    }),\n    removeOpenChannelHandler: jest.fn((id: string) => {\n      delete this.__context.openChannelHandlers[id];\n    }),\n    createOpenChannelListQuery: jest.fn((params?: OpenChannelListQueryParams) => {\n      return createMockQuery({\n        type: 'openChannel',\n        limit: params?.limit,\n        dataLength: 200,\n        sdk: this.asMockSendbirdChatSDK(),\n      });\n    }),\n  } as unknown as SendbirdChatSDK['openChannel'];\n  constructor(params: InitParams = defaultParams) {\n    this.__params = { ...defaultParams, ...params };\n    this.__context.appInfo = {\n      ...this.__context.appInfo,\n      ...this.__params.appInfo,\n    };\n    this.__context.localCacheEnabled = this.__params.localCacheEnabled;\n  }\n  asMockSendbirdChatSDK() {\n    return this as unknown as MockSendbirdChatSDK;\n  }\n}\n"],"mappings":"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"}