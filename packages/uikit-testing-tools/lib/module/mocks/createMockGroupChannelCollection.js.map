{"version":3,"names":["ChannelType","GroupChannelFilter","GroupChannelListOrder","createTestContext","createMockChannel","createMockGroupChannelCollection","params","MockGroupChannelCollection","tc","constructor","_defineProperty","LATEST_LAST_MESSAGE","jest","fn","__handlerId","sdk","__context","groupChannelCollectionHandlers","channels","Array","limit","fill","map","channelType","GROUP","asGroupChannel","handler","String","getRandom","Object","assign"],"sources":["createMockGroupChannelCollection.ts"],"sourcesContent":["// @ts-nocheck\nimport { ChannelType } from '@sendbird/chat';\nimport {\n  GroupChannel,\n  GroupChannelCollectionEventHandler,\n  GroupChannelCollectionParams,\n  GroupChannelFilter,\n  GroupChannelListOrder,\n} from '@sendbird/chat/groupChannel';\nimport type { SendbirdGroupChannelCollection } from '@sendbird/uikit-utils';\n\nimport type { GetMockParams, GetMockProps } from '../types';\nimport { createTestContext } from '../utils/createTestContext';\nimport { createMockChannel } from './createMockChannel';\n\ntype Params = GetMockParams<GroupChannelCollectionParams & { hasMore: boolean }>;\nexport const createMockGroupChannelCollection = (params: Params) => {\n  return new MockGroupChannelCollection(params);\n};\n\nconst tc = createTestContext();\n\nclass MockGroupChannelCollection implements GetMockProps<Params, SendbirdGroupChannelCollection> {\n  constructor(public params: Params) {\n    Object.assign(this, params);\n  }\n  __handlerId?: string;\n\n  channels: GroupChannel[] = [];\n  filter: GroupChannelFilter = new GroupChannelFilter();\n  order: GroupChannelListOrder = GroupChannelListOrder.LATEST_LAST_MESSAGE;\n\n  dispose = jest.fn(() => {\n    if (this.__handlerId && this.params.sdk) {\n      delete this.params.sdk.__context.groupChannelCollectionHandlers[this.__handlerId];\n    }\n  });\n\n  hasMore = true;\n\n  loadMore = jest.fn(async () => {\n    const channels = Array(this.params.limit ?? 20)\n      .fill(null)\n      .map(() => createMockChannel({ sdk: this.params.sdk, channelType: ChannelType.GROUP }).asGroupChannel());\n\n    this.channels = [...this.channels, ...channels];\n    return channels;\n  });\n\n  setGroupChannelCollectionHandler = jest.fn((handler: GroupChannelCollectionEventHandler) => {\n    if (this.params.sdk) {\n      this.__handlerId = String(tc.getRandom());\n      this.params.sdk.__context.groupChannelCollectionHandlers[this.__handlerId] = handler;\n    }\n  });\n}\n"],"mappings":";;;AAAA;AACA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,SAIEC,kBAAkB,EAClBC,qBAAqB,QAChB,6BAA6B;AAIpC,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,SAASC,iBAAiB,QAAQ,qBAAqB;AAGvD,OAAO,MAAMC,gCAAgC,GAAIC,MAAc,IAAK;EAClE,OAAO,IAAIC,0BAA0B,CAACD,MAAM,CAAC;AAC/C,CAAC;AAED,MAAME,EAAE,GAAGL,iBAAiB,EAAE;AAE9B,MAAMI,0BAA0B,CAAiE;EAC/FE,WAAWA,CAAQH,MAAc,EAAE;IAAA,KAAhBA,MAAc,GAAdA,MAAc;IAAAI,eAAA;IAAAA,eAAA,mBAKN,EAAE;IAAAA,eAAA,iBACA,IAAIT,kBAAkB,EAAE;IAAAS,eAAA,gBACtBR,qBAAqB,CAACS,mBAAmB;IAAAD,eAAA,kBAE9DE,IAAI,CAACC,EAAE,CAAC,MAAM;MACtB,IAAI,IAAI,CAACC,WAAW,IAAI,IAAI,CAACR,MAAM,CAACS,GAAG,EAAE;QACvC,OAAO,IAAI,CAACT,MAAM,CAACS,GAAG,CAACC,SAAS,CAACC,8BAA8B,CAAC,IAAI,CAACH,WAAW,CAAC;MACnF;IACF,CAAC,CAAC;IAAAJ,eAAA,kBAEQ,IAAI;IAAAA,eAAA,mBAEHE,IAAI,CAACC,EAAE,CAAC,YAAY;MAC7B,MAAMK,QAAQ,GAAGC,KAAK,CAAC,IAAI,CAACb,MAAM,CAACc,KAAK,IAAI,EAAE,CAAC,CAC5CC,IAAI,CAAC,IAAI,CAAC,CACVC,GAAG,CAAC,MAAMlB,iBAAiB,CAAC;QAAEW,GAAG,EAAE,IAAI,CAACT,MAAM,CAACS,GAAG;QAAEQ,WAAW,EAAEvB,WAAW,CAACwB;MAAM,CAAC,CAAC,CAACC,cAAc,EAAE,CAAC;MAE1G,IAAI,CAACP,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACA,QAAQ,EAAE,GAAGA,QAAQ,CAAC;MAC/C,OAAOA,QAAQ;IACjB,CAAC,CAAC;IAAAR,eAAA,2CAEiCE,IAAI,CAACC,EAAE,CAAEa,OAA2C,IAAK;MAC1F,IAAI,IAAI,CAACpB,MAAM,CAACS,GAAG,EAAE;QACnB,IAAI,CAACD,WAAW,GAAGa,MAAM,CAACnB,EAAE,CAACoB,SAAS,EAAE,CAAC;QACzC,IAAI,CAACtB,MAAM,CAACS,GAAG,CAACC,SAAS,CAACC,8BAA8B,CAAC,IAAI,CAACH,WAAW,CAAC,GAAGY,OAAO;MACtF;IACF,CAAC,CAAC;IA9BAG,MAAM,CAACC,MAAM,CAAC,IAAI,EAAExB,MAAM,CAAC;EAC7B;AA8BF"}