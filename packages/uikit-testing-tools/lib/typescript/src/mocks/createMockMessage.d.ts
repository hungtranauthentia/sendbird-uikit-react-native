import { ChannelType } from '@sendbird/chat';
import { NotificationData } from '@sendbird/chat/feedChannel';
import { Form } from '@sendbird/chat/lib/__definition';
import { AdminMessage, Feedback, FeedbackStatus, MessageType } from '@sendbird/chat/message';
import type { SendbirdAdminMessage, SendbirdBaseMessage, SendbirdFileMessage, SendbirdMultipleFilesMessage, SendbirdSendableMessage, SendbirdUserMessage } from '@sendbird/uikit-utils';
import type { GetMockParams, GetMockProps } from '../types';
type Params = GetMockParams<SendbirdFileMessage & SendbirdUserMessage & SendbirdAdminMessage>;
export declare const createMockMessage: (params: Params) => MockMessage;
declare class MockMessage implements GetMockProps<Params, SendbirdBaseMessage> {
    params: Params;
    constructor(params: Params);
    __updateIdsBySendingStatus(params: Params): void;
    channelType: ChannelType;
    channelUrl: string;
    createdAt: number;
    updatedAt: number;
    messageId: number;
    messageType: MessageType;
    parentMessageId: number;
    parentMessage: null;
    silent: boolean;
    isOperatorMessage: boolean;
    data: string;
    customType: string;
    mentionType: null;
    mentionedUsers: null;
    mentionedUserIds: null;
    mentionedMessageTemplate: string;
    threadInfo: null;
    reactions: never[];
    metaArrays: never[];
    ogMetaData: null;
    appleCriticalAlertOptions: null;
    scheduledInfo: null;
    extendedMessage: {};
    notificationData: NotificationData | null;
    forms: Form[] | null;
    myFeedback: Feedback | null;
    myFeedbackStatus: FeedbackStatus;
    suggestedReplies: string[] | null;
    isFileMessage(): this is SendbirdFileMessage;
    isMultipleFilesMessage(): this is SendbirdMultipleFilesMessage;
    isUserMessage(): this is SendbirdUserMessage;
    isAdminMessage(): this is SendbirdAdminMessage;
    applyParentMessage(): boolean;
    applyReactionEvent(): void;
    applyThreadInfoUpdateEvent(): boolean;
    getMetaArraysByKeys(): never[];
    isEqual(): boolean;
    isIdentical(): boolean;
    serialize(): object;
    deleteFeedback(_: number): Promise<void>;
    hasForm(): this is AdminMessage;
    submitFeedback(_: Pick<Feedback, 'rating' | 'comment'>): Promise<void>;
    submitForm(_: {
        formId?: string;
        answers?: Record<string, string>;
    }): Promise<void>;
    updateFeedback(_: Feedback): Promise<void>;
    markThreadAsRead(): Promise<void>;
    setPushNotificationEnabled(_: boolean): Promise<void>;
    asFileMessage(): SendbirdFileMessage;
    asUserMessage(): SendbirdUserMessage;
    asAdminMessage(): SendbirdAdminMessage;
    asSendableMessage(): SendbirdSendableMessage;
    asBaseMessage(): SendbirdBaseMessage;
}
export {};
