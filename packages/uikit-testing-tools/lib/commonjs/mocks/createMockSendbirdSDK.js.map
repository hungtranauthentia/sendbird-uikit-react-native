{"version":3,"names":["_chat","require","_uikitUtils","_createTestContext","_createMockChannel","_createMockGroupChannelCollection","_createMockQuery","_createMockUser","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","tc","createTestContext","defaultParams","testType","userId","getHash","appInfo","emojiHash","uploadSizeLimit","useReaction","applicationAttributes","values","ApplicationAttributes","premiumFeatureList","PremiumFeatures","enabledChannelMemberShipHistory","localCacheEnabled","createMockSendbirdChat","params","arguments","length","MockSDK","asMockSendbirdChatSDK","exports","__emit","_len","_ref","Array","_key","name","type","args","startsWith","eventName","replace","__context","openChannelHandlers","forEach","handler","_handler$eventName","groupChannelHandlers","_handler$eventName2","connectionHandlers","_handler$eventName3","userEventHandlers","_handler$eventName4","__throwIfFailureTest","__params","Error","isCacheEnabled","constructor","groupChannels","openChannels","groupChannelCollections","groupChannelCollectionHandlers","groupChannelMessageCollectionHandlers","pushTriggerOption","PushTriggerOption","DEFAULT","createMockUser","jest","fn","id","option","currentUser","createMockQuery","limit","dataLength","sdk","createMyGroupChannelListQuery","createGroupChannelCollection","gcc","createMockGroupChannelCollection","push","getChannel","url","channelInContext","find","it","channel","createMockChannel","channelType","ChannelType","GROUP","asGroupChannel","addGroupChannelHandler","removeGroupChannelHandler","getTotalUnreadMessageCount","getTotalUnreadChannelCount","OPEN","asOpenChannel","addOpenChannelHandler","removeOpenChannelHandler","createOpenChannelListQuery"],"sources":["createMockSendbirdSDK.ts"],"sourcesContent":["// @ts-nocheck\nimport {\n  ApplicationUserListQueryParams,\n  ChannelType,\n  ConnectionHandler,\n  PushTriggerOption,\n  UserEventHandler,\n} from '@sendbird/chat';\nimport type {\n  GroupChannelCollectionEventHandler,\n  GroupChannelCollectionParams,\n  GroupChannelHandler,\n  GroupChannelListQueryParams,\n  MessageCollectionEventHandler,\n} from '@sendbird/chat/groupChannel';\nimport type {\n  AppInfo,\n  ConnectionHandlerParams,\n  GroupChannelHandlerParams,\n  OpenChannelHandlerParams,\n  UserEventHandlerParams,\n} from '@sendbird/chat/lib/__definition';\nimport type { OpenChannelHandler, OpenChannelListQueryParams } from '@sendbird/chat/openChannel';\nimport type {\n  SendbirdChatSDK,\n  SendbirdGroupChannel,\n  SendbirdGroupChannelCollection,\n  SendbirdOpenChannel,\n} from '@sendbird/uikit-utils';\nimport { ApplicationAttributes, PremiumFeatures } from '@sendbird/uikit-utils';\n\nimport { createTestContext } from '../utils/createTestContext';\nimport { createMockChannel } from './createMockChannel';\nimport { createMockGroupChannelCollection } from './createMockGroupChannelCollection';\nimport { createMockQuery } from './createMockQuery';\nimport { createMockUser } from './createMockUser';\n\nconst tc = createTestContext();\n\nexport interface MockSendbirdChatSDK extends SendbirdChatSDK {\n  __emit(\n    type: 'channel' | 'connection' | 'userEvent',\n    name:\n      | `group_${keyof GroupChannelHandlerParams}`\n      | `open_${keyof OpenChannelHandlerParams}`\n      | keyof ConnectionHandlerParams\n      | keyof UserEventHandlerParams,\n    ...args: unknown[]\n  ): void;\n  __context: {\n    openChannels: SendbirdOpenChannel[];\n    groupChannels: SendbirdGroupChannel[];\n    groupChannelCollections: SendbirdGroupChannelCollection[];\n    groupChannelHandlers: Record<string, GroupChannelHandler>;\n    openChannelHandlers: Record<string, OpenChannelHandler>;\n    connectionHandlers: Record<string, ConnectionHandler>;\n    userEventHandlers: Record<string, UserEventHandler>;\n    groupChannelCollectionHandlers: Record<string, GroupChannelCollectionEventHandler>;\n    groupChannelMessageCollectionHandlers: Record<string, Record<string, MessageCollectionEventHandler>>;\n    appInfo: AppInfo;\n    localCacheEnabled: boolean;\n  };\n  __params: InitParams;\n  __throwIfFailureTest(): void;\n}\n\ntype InitParams = {\n  testType?: 'success' | 'failure';\n  userId?: string;\n  appInfo?: Partial<AppInfo>;\n  localCacheEnabled?: boolean;\n};\n\nconst defaultParams: Required<InitParams> = {\n  testType: 'success',\n  userId: 'user_id_' + tc.getHash(),\n  appInfo: {\n    emojiHash: 'hash',\n    uploadSizeLimit: 999999,\n    useReaction: true,\n    applicationAttributes: Object.values(ApplicationAttributes),\n    premiumFeatureList: Object.values(PremiumFeatures),\n    enabledChannelMemberShipHistory: false,\n  },\n  localCacheEnabled: false,\n};\n\nexport const createMockSendbirdChat = (params: InitParams = defaultParams): MockSendbirdChatSDK => {\n  return new MockSDK(params).asMockSendbirdChatSDK();\n};\n\n// @ts-ignore\n\nclass MockSDK implements MockSendbirdChatSDK {\n  __params = defaultParams;\n  __context = {\n    groupChannels: [] as SendbirdGroupChannel[],\n    openChannels: [] as SendbirdOpenChannel[],\n    groupChannelCollections: [] as SendbirdGroupChannelCollection[],\n    groupChannelHandlers: {} as Record<string, GroupChannelHandler>,\n    openChannelHandlers: {} as Record<string, OpenChannelHandler>,\n    connectionHandlers: {} as Record<string, ConnectionHandler>,\n    userEventHandlers: {} as Record<string, UserEventHandler>,\n    groupChannelCollectionHandlers: {} as Record<string, GroupChannelCollectionEventHandler>,\n    groupChannelMessageCollectionHandlers: {} as Record<string, Record<string, MessageCollectionEventHandler>>,\n    pushTriggerOption: PushTriggerOption.DEFAULT,\n    appInfo: this.__params.appInfo as AppInfo,\n    localCacheEnabled: this.__params.localCacheEnabled,\n  };\n\n  __emit(...[name, type, ...args]: Parameters<MockSendbirdChatSDK['__emit']>) {\n    switch (name) {\n      case 'channel': {\n        if (type.startsWith('open_')) {\n          const eventName = type.replace('open_', '') as keyof OpenChannelHandlerParams;\n          Object.values(this.__context.openChannelHandlers).forEach((handler) => {\n            // @ts-ignore\n            handler[eventName]?.(...args);\n          });\n        }\n        if (type.startsWith('group_')) {\n          const eventName = type.replace('group_', '') as keyof GroupChannelHandlerParams;\n          Object.values(this.__context.groupChannelHandlers).forEach((handler) => {\n            // @ts-ignore\n            handler[eventName]?.(...args);\n          });\n        }\n        break;\n      }\n      case 'connection': {\n        const eventName = type as keyof ConnectionHandlerParams;\n        Object.values(this.__context.connectionHandlers).forEach((handler) => {\n          // @ts-ignore\n          handler[eventName]?.(...args);\n        });\n        break;\n      }\n      case 'userEvent': {\n        const eventName = type as keyof UserEventHandlerParams;\n        Object.values(this.__context.userEventHandlers).forEach((handler) => {\n          // @ts-ignore\n          handler[eventName]?.(...args);\n        });\n        break;\n      }\n    }\n  }\n  __throwIfFailureTest() {\n    if (this.__params.testType === 'failure') throw new Error('Failure test');\n  }\n\n  currentUser = createMockUser(this.__params);\n  addConnectionHandler = jest.fn((id: string, handler: ConnectionHandler) => {\n    this.__context.connectionHandlers[id] = handler;\n  });\n  removeConnectionHandler = jest.fn((id: string) => {\n    delete this.__context.connectionHandlers[id];\n  });\n  addUserEventHandler = jest.fn((id: string, handler: UserEventHandler) => {\n    this.__context.userEventHandlers[id] = handler;\n  });\n  removeUserEventHandler = jest.fn((id: string) => {\n    delete this.__context.userEventHandlers[id];\n  });\n  setPushTriggerOption = jest.fn(async (option: PushTriggerOption) => {\n    this.__throwIfFailureTest();\n    this.__context.pushTriggerOption = option;\n    return this.__context.pushTriggerOption;\n  });\n  getPushTriggerOption = jest.fn(async () => {\n    this.__throwIfFailureTest();\n    return this.__context.pushTriggerOption;\n  });\n\n  connect = jest.fn(async () => {\n    this.__throwIfFailureTest();\n    this.__emit('connection', 'onReconnectStarted');\n    this.__emit('connection', 'onReconnectSucceeded');\n    return this.currentUser;\n  });\n  createApplicationUserListQuery = jest.fn((params?: ApplicationUserListQueryParams) => {\n    return createMockQuery({ type: 'user', limit: params?.limit, dataLength: 200, sdk: this.asMockSendbirdChatSDK() });\n  }) as unknown as SendbirdChatSDK['createApplicationUserListQuery'];\n  get appInfo() {\n    return this.__context.appInfo;\n  }\n  get isCacheEnabled() {\n    return this.__context.localCacheEnabled;\n  }\n\n  groupChannel = {\n    createMyGroupChannelListQuery: jest.fn((params?: GroupChannelListQueryParams) => {\n      return createMockQuery({\n        type: 'groupChannel',\n        limit: params?.limit,\n        dataLength: 200,\n        sdk: this.asMockSendbirdChatSDK(),\n      });\n    }),\n    createGroupChannelCollection: jest.fn((params?: GroupChannelCollectionParams) => {\n      this.__throwIfFailureTest();\n\n      const gcc = createMockGroupChannelCollection({ ...params, sdk: this.asMockSendbirdChatSDK() });\n      this.__context.groupChannelCollections.push(gcc);\n      return gcc;\n    }),\n    getChannel: jest.fn(async (url: string) => {\n      this.__throwIfFailureTest();\n\n      const channelInContext = this.__context.groupChannels.find((it) => it.url === url);\n      if (channelInContext) {\n        return channelInContext;\n      } else {\n        const channel = createMockChannel({\n          channelType: ChannelType.GROUP,\n          url,\n          sdk: this.asMockSendbirdChatSDK(),\n        }).asGroupChannel();\n        this.__context.groupChannels.push(channel);\n        return channel;\n      }\n    }),\n    addGroupChannelHandler: jest.fn((id: string, handler: GroupChannelHandler) => {\n      this.__context.groupChannelHandlers[id] = handler;\n    }),\n    removeGroupChannelHandler: jest.fn((id: string) => {\n      delete this.__context.groupChannelHandlers[id];\n    }),\n    getTotalUnreadMessageCount: jest.fn(() => {\n      return 10;\n    }),\n    getTotalUnreadChannelCount: jest.fn(() => {\n      return 10;\n    }),\n  } as unknown as SendbirdChatSDK['groupChannel'];\n\n  openChannel = {\n    getChannel: jest.fn(async (url: string) => {\n      this.__throwIfFailureTest();\n\n      const channelInContext = this.__context.openChannels.find((it) => it.url === url);\n      if (channelInContext) {\n        return channelInContext;\n      } else {\n        const channel = createMockChannel({\n          channelType: ChannelType.OPEN,\n          url,\n          sdk: this.asMockSendbirdChatSDK(),\n        }).asOpenChannel();\n        this.__context.openChannels.push(channel);\n        return channel;\n      }\n    }),\n    addOpenChannelHandler: jest.fn((id: string, handler: OpenChannelHandler) => {\n      this.__context.openChannelHandlers[id] = handler;\n    }),\n    removeOpenChannelHandler: jest.fn((id: string) => {\n      delete this.__context.openChannelHandlers[id];\n    }),\n    createOpenChannelListQuery: jest.fn((params?: OpenChannelListQueryParams) => {\n      return createMockQuery({\n        type: 'openChannel',\n        limit: params?.limit,\n        dataLength: 200,\n        sdk: this.asMockSendbirdChatSDK(),\n      });\n    }),\n  } as unknown as SendbirdChatSDK['openChannel'];\n  constructor(params: InitParams = defaultParams) {\n    this.__params = { ...defaultParams, ...params };\n    this.__context.appInfo = {\n      ...this.__context.appInfo,\n      ...this.__params.appInfo,\n    };\n    this.__context.localCacheEnabled = this.__params.localCacheEnabled;\n  }\n  asMockSendbirdChatSDK() {\n    return this as unknown as MockSendbirdChatSDK;\n  }\n}\n"],"mappings":"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"}