{"version":3,"names":["_chat","require","_groupChannel","_message","_createTestContext","_createMockMessage","_createMockMessageCollection","_createMockQuery","_createMockUser","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","tc","createTestContext","createMockChannel","params","MockChannel","exports","constructor","ChannelType","BASE","getHash","createMockUser","userId","date","increment","HiddenState","UNHIDDEN","Date","now","createMockMessage","CountPreference","ALL","MemberState","JOINED","MutedState","UNMUTED","PushTriggerOption","Role","NONE","jest","fn","_this$params$sdk","sdk","__throwIfFailureTest","_this$params$sdk2","_this$params$sdk3","_this$params$sdk4","query","createMockQuery","type","dataLength","limit","channelType","channelUrl","OPEN","GROUP","memberStateFilter","MemberStateFilter","mutedMemberFilter","MutedMemberFilter","nicknameStartsWithFilter","operatorFilter","OperatorFilter","order","MemberListOrder","MEMBER_NICKNAME_ALPHABETICAL","reverse","customTypesFilter","includeMetaArray","includeParentMessageInfo","includeReactions","includeThreadInfo","messageTypeFilter","MessageTypeFilter","replyType","ReplyType","senderUserIdsFilter","showSubchannelMessagesOnly","load","next","createMockMessageCollection","groupChannel","asGroupChannel","asMessageCollection","increaseIncrement","assign","serialize","Error","isOperator","cachedMetaData","isIdentical","channel","url","isEqual","is","addOperators","removeOperators","getMyMutedInfo","getMetaData","getAllMetaData","createMetaData","updateMetaData","deleteMetaData","deleteAllMetaData","getMetaCounters","getAllMetaCounters","createMetaCounters","updateMetaCounters","increaseMetaCounters","decreaseMetaCounters","deleteMetaCounter","deleteAllMetaCounters","muteUser","muteUserWithUserId","unmuteUser","unmuteUserWithUserId","banUser","banUserWithUserId","unbanUser","unbanUserWithUserId","freeze","unfreeze","getMessagesByMessageId","getMessagesByTimestamp","getMessageChangeLogsSinceTimestamp","getMessageChangeLogsSinceToken","resendMessage","copyMessage","sendUserMessage","resendUserMessage","updateUserMessage","copyUserMessage","translateUserMessage","sendFileMessage","sendFileMessages","resendFileMessage","updateFileMessage","cancelUploadingFileMessage","copyFileMessage","deleteMessage","addReaction","deleteReaction","createMessageMetaArrayKeys","deleteMessageMetaArrayKeys","addMessageMetaArrayValues","removeMessageMetaArrayValues","report","reportUser","reportMessage","isOpenChannel","isGroupChannel","isFeedChannel","FEED","asOpenChannel","cachedUndeliveredMemberState","cachedUnreadMemberState","createPollListQuery","createPollVoterListQuery","deletePoll","deletePollOption","endTyping","getMyPushTriggerOption","getPollChangeLogsSinceTimestamp","getPollChangeLogsSinceToken","getReadMembers","getReadStatus","getTypingUsers","getDeliveryStatus","hide","invalidateTypingStatus","invite","inviteWithUserIds","isHidden","isReadMessage","isTyping","join","leave","markAsDelivered","markAsRead","pinMessage","removeMember","resetMyHistory","sendScheduledMessageNow","setMyCountPreference","setMyPushTriggerOption","startTyping","unhide","unpinMessage","updatePoll","updatePollOption","updateScheduledFileMessage","updateScheduledUserMessage","votePoll","createScheduledFileMessage","createScheduledUserMessage","declineInvitation","messageCollectionLastAccessedAt","createThreadedParentMessageListQuery","createPinnedMessageListQuery","_params","sendMultipleFilesMessage","uploadFile"],"sources":["createMockChannel.ts"],"sourcesContent":["// @ts-nocheck\nimport {\n  BannedUserListQuery,\n  ChannelType,\n  FileUploadResult,\n  MetaCounter,\n  MetaData,\n  MutedInfo,\n  MutedUserListQuery,\n  OperatorListQuery,\n  PushTriggerOption,\n  Role,\n} from '@sendbird/chat';\nimport {\n  CountPreference,\n  HiddenState,\n  MemberListOrder,\n  MemberListQuery,\n  MemberListQueryParams,\n  MemberState,\n  MemberStateFilter,\n  MessageCollectionParams,\n  MutedMemberFilter,\n  MutedState,\n  OperatorFilter,\n  ReadStatus,\n} from '@sendbird/chat/groupChannel';\nimport {\n  BaseListQueryParams,\n  DeliveryStatus,\n  MultipleFilesMessageCreateParams,\n  MultipleFilesMessageRequestHandler,\n  PinnedMessageListQuery,\n  PinnedMessageListQueryParams,\n} from '@sendbird/chat/lib/__definition';\nimport { FileCompat } from '@sendbird/chat/lib/__definition';\nimport {\n  MessageChangelogs,\n  MessageRequestHandler,\n  MessageTypeFilter,\n  PreviousMessageListQuery,\n  PreviousMessageListQueryParams,\n  ReactionEvent,\n  ReplyType,\n} from '@sendbird/chat/message';\nimport type { ParticipantListQuery } from '@sendbird/chat/openChannel';\nimport type { Poll, PollChangelogs, PollListQuery, PollVoteEvent, PollVoterListQuery } from '@sendbird/chat/poll';\nimport type {\n  SendbirdBaseChannel,\n  SendbirdBaseMessage,\n  SendbirdFeedChannel,\n  SendbirdFileMessage,\n  SendbirdGroupChannel,\n  SendbirdMember,\n  SendbirdMessageCollection,\n  SendbirdMultipleFilesMessage,\n  SendbirdOpenChannel,\n  SendbirdRestrictedUser,\n  SendbirdUserMessage,\n} from '@sendbird/uikit-utils';\n\nimport type { GetMockParams, GetMockProps } from '../types';\nimport { createTestContext } from '../utils/createTestContext';\nimport { createMockMessage } from './createMockMessage';\nimport { createMockMessageCollection } from './createMockMessageCollection';\nimport { createMockQuery } from './createMockQuery';\nimport { createMockUser } from './createMockUser';\n\nconst tc = createTestContext();\n\ntype Params = GetMockParams<SendbirdOpenChannel & SendbirdGroupChannel>;\n\nexport const createMockChannel = (params: Params) => {\n  return new MockChannel(params);\n};\n\nclass MockChannel implements GetMockProps<Params, SendbirdBaseChannel & SendbirdOpenChannel & SendbirdGroupChannel> {\n  constructor(public params: Params) {\n    tc.increaseIncrement();\n    Object.assign(this, params);\n  }\n\n  channelType: ChannelType = ChannelType.BASE;\n  url = 'channel_url_' + tc.getHash();\n  name = 'channel_name_' + tc.getHash();\n  coverUrl = 'channel_cover_url_' + tc.getHash();\n  isFrozen = false;\n  isEphemeral = false;\n  customType = '';\n  data = '';\n  creator = createMockUser({ userId: 'creator-user-id' });\n  createdAt: number = tc.date + tc.increment;\n  participantCount = 0;\n  operators = [];\n  hiddenState = HiddenState.UNHIDDEN;\n  invitedAt = Date.now();\n  inviter = createMockUser({ userId: 'inviter-user-id' });\n  readonly isAccessCodeRequired = false;\n  readonly isBroadcast = false;\n  readonly isDiscoverable = true;\n  readonly isDistinct = false;\n  readonly isExclusive = false;\n  readonly isPublic = true;\n  readonly isSuper = false;\n  readonly isPushEnabled = true;\n  readonly isChatNotification = false;\n  joinedAt = Date.now();\n  joinedMemberCount = 0;\n  lastMessage = createMockMessage({});\n  lastPinnedMessage = createMockMessage({});\n  memberCount = 0;\n  members = [];\n  messageOffsetTimestamp = 0;\n  messageSurvivalSeconds = 0;\n  myCountPreference = CountPreference.ALL;\n  myLastRead = 0;\n  myMemberState = MemberState.JOINED;\n  myMutedState = MutedState.UNMUTED;\n  myPushTriggerOption = PushTriggerOption.ALL;\n  myRole = Role.NONE;\n  pinnedMessageIds = [];\n  unreadMentionCount = 0;\n  unreadMessageCount = 0;\n  totalUnreadReplyCount = 0;\n\n  serialize(): object {\n    throw new Error('Method not implemented.');\n  }\n  isOperator(): boolean {\n    throw new Error('Method not implemented.');\n  }\n  // @ts-ignore\n  refresh = jest.fn(async (): Promise<this> => {\n    this.params.sdk?.__throwIfFailureTest();\n    return this;\n  });\n\n  enter = jest.fn(async () => {\n    this.params.sdk?.__throwIfFailureTest();\n  });\n  exit = jest.fn(async () => {\n    this.params.sdk?.__throwIfFailureTest();\n  });\n  delete = jest.fn(async () => {\n    this.params.sdk?.__throwIfFailureTest();\n  });\n  updateChannel = jest.fn();\n  updateChannelWithOperatorUserIds = jest.fn();\n\n  get cachedMetaData(): object {\n    throw new Error('Method not implemented.');\n  }\n  isIdentical(channel: SendbirdBaseChannel): boolean {\n    return this.url === channel.url;\n  }\n  isEqual(channel: SendbirdBaseChannel): boolean {\n    return Object.is(channel, this);\n  }\n  createOperatorListQuery = jest.fn((params?: BaseListQueryParams | undefined): OperatorListQuery => {\n    const query = createMockQuery<SendbirdRestrictedUser>({\n      type: 'user',\n      dataLength: 50,\n      limit: params?.limit,\n      sdk: this.params.sdk,\n    });\n    return {\n      channelType: ChannelType.BASE,\n      channelUrl: 'channel_url_' + tc.getHash(),\n      ...query,\n    };\n  });\n  createMutedUserListQuery = jest.fn((params?: BaseListQueryParams | undefined): MutedUserListQuery => {\n    const query = createMockQuery<SendbirdRestrictedUser>({\n      type: 'user',\n      dataLength: 50,\n      limit: params?.limit,\n      sdk: this.params.sdk,\n    });\n    return {\n      channelType: ChannelType.BASE,\n      channelUrl: 'channel_url_' + tc.getHash(),\n      ...query,\n    };\n  });\n  createBannedUserListQuery = jest.fn((params?: BaseListQueryParams | undefined): BannedUserListQuery => {\n    const query = createMockQuery<SendbirdRestrictedUser>({\n      type: 'user',\n      dataLength: 50,\n      limit: params?.limit,\n      sdk: this.params.sdk,\n    });\n    return {\n      channelType: ChannelType.BASE,\n      channelUrl: 'channel_url_' + tc.getHash(),\n      ...query,\n    };\n  });\n\n  createParticipantListQuery = jest.fn((params: BaseListQueryParams): ParticipantListQuery => {\n    const query = createMockQuery<SendbirdRestrictedUser>({\n      type: 'user',\n      dataLength: 50,\n      limit: params?.limit,\n      sdk: this.params.sdk,\n    });\n    return {\n      channelType: ChannelType.OPEN,\n      channelUrl: 'channel_url_' + tc.getHash(),\n      ...query,\n    };\n  });\n  createMemberListQuery = jest.fn((params?: MemberListQueryParams): MemberListQuery => {\n    const query = createMockQuery<SendbirdMember>({\n      type: 'user',\n      dataLength: 50,\n      limit: params?.limit,\n      sdk: this.params.sdk,\n    });\n    return {\n      channelType: ChannelType.GROUP,\n      memberStateFilter: MemberStateFilter.ALL,\n      mutedMemberFilter: MutedMemberFilter.ALL,\n      nicknameStartsWithFilter: '',\n      operatorFilter: OperatorFilter.ALL,\n      order: MemberListOrder.MEMBER_NICKNAME_ALPHABETICAL,\n      channelUrl: 'channel_url_' + tc.getHash(),\n      ...query,\n    };\n  });\n  createPreviousMessageListQuery = jest.fn(function (\n    params?: PreviousMessageListQueryParams | undefined,\n  ): PreviousMessageListQuery {\n    const query = createMockQuery<SendbirdBaseMessage>({\n      type: 'message',\n      dataLength: 300,\n      limit: params?.limit,\n      sdk: this.params.sdk,\n    });\n    return {\n      reverse: false,\n      channelType: ChannelType.BASE,\n      channelUrl: 'channel_url_' + tc.getHash(),\n      customTypesFilter: [],\n      includeMetaArray: false,\n      includeParentMessageInfo: false,\n      includeReactions: false,\n      includeThreadInfo: false,\n      messageTypeFilter: MessageTypeFilter.ALL,\n      replyType: ReplyType.NONE,\n      senderUserIdsFilter: [],\n      showSubchannelMessagesOnly: false,\n      load: query.next,\n      ...query,\n    };\n  });\n  createMessageCollection = jest.fn((params?: MessageCollectionParams | undefined): SendbirdMessageCollection => {\n    return createMockMessageCollection({\n      ...params,\n      sdk: this.params.sdk,\n      groupChannel: this.asGroupChannel(),\n    }).asMessageCollection();\n  });\n\n  addOperators(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  removeOperators(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  getMyMutedInfo(): Promise<MutedInfo> {\n    throw new Error('Method not implemented.');\n  }\n  getMetaData(): Promise<MetaData> {\n    throw new Error('Method not implemented.');\n  }\n  getAllMetaData(): Promise<MetaData> {\n    throw new Error('Method not implemented.');\n  }\n  createMetaData(): Promise<MetaData> {\n    throw new Error('Method not implemented.');\n  }\n  updateMetaData(): Promise<MetaData> {\n    throw new Error('Method not implemented.');\n  }\n  deleteMetaData(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  deleteAllMetaData(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  getMetaCounters(): Promise<MetaCounter> {\n    throw new Error('Method not implemented.');\n  }\n  getAllMetaCounters(): Promise<MetaCounter> {\n    throw new Error('Method not implemented.');\n  }\n  createMetaCounters(): Promise<MetaCounter> {\n    throw new Error('Method not implemented.');\n  }\n  updateMetaCounters(): Promise<MetaCounter> {\n    throw new Error('Method not implemented.');\n  }\n  increaseMetaCounters(): Promise<MetaCounter> {\n    throw new Error('Method not implemented.');\n  }\n  decreaseMetaCounters(): Promise<MetaCounter> {\n    throw new Error('Method not implemented.');\n  }\n  deleteMetaCounter(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  deleteAllMetaCounters(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  muteUser(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  muteUserWithUserId(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  unmuteUser(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  unmuteUserWithUserId(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  banUser(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  banUserWithUserId(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  unbanUser(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  unbanUserWithUserId(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  freeze(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  unfreeze(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  getMessagesByMessageId(): Promise<SendbirdBaseMessage[]> {\n    throw new Error('Method not implemented.');\n  }\n  getMessagesByTimestamp(): Promise<SendbirdBaseMessage[]> {\n    throw new Error('Method not implemented.');\n  }\n  getMessageChangeLogsSinceTimestamp(): Promise<MessageChangelogs> {\n    throw new Error('Method not implemented.');\n  }\n  getMessageChangeLogsSinceToken(): Promise<MessageChangelogs> {\n    throw new Error('Method not implemented.');\n  }\n  resendMessage(\n    failedMessage: SendbirdMultipleFilesMessage,\n  ): MultipleFilesMessageRequestHandler<SendbirdMultipleFilesMessage>;\n  resendMessage(failedMessage: SendbirdFileMessage, file?: FileCompat): MessageRequestHandler<SendbirdFileMessage>;\n  resendMessage(failedMessage: SendbirdUserMessage): MessageRequestHandler<SendbirdUserMessage>;\n  resendMessage(): unknown {\n    throw new Error('Method not implemented.');\n  }\n  copyMessage(\n    channel: SendbirdGroupChannel,\n    message: SendbirdMultipleFilesMessage,\n  ): MessageRequestHandler<SendbirdMultipleFilesMessage>;\n  copyMessage(channel: SendbirdBaseChannel, message: SendbirdFileMessage): MessageRequestHandler<SendbirdFileMessage>;\n  copyMessage(channel: SendbirdBaseChannel, message: SendbirdUserMessage): MessageRequestHandler<SendbirdUserMessage>;\n  copyMessage(): unknown {\n    throw new Error('Method not implemented.');\n  }\n  sendUserMessage(): MessageRequestHandler {\n    throw new Error('Method not implemented.');\n  }\n  resendUserMessage(): Promise<SendbirdUserMessage> {\n    throw new Error('Method not implemented.');\n  }\n  updateUserMessage(): Promise<SendbirdUserMessage> {\n    throw new Error('Method not implemented.');\n  }\n  copyUserMessage(): Promise<SendbirdUserMessage> {\n    throw new Error('Method not implemented.');\n  }\n  translateUserMessage(): Promise<SendbirdUserMessage> {\n    throw new Error('Method not implemented.');\n  }\n  sendFileMessage(): MessageRequestHandler {\n    throw new Error('Method not implemented.');\n  }\n  sendFileMessages(): MessageRequestHandler {\n    throw new Error('Method not implemented.');\n  }\n  resendFileMessage(): Promise<SendbirdFileMessage> {\n    throw new Error('Method not implemented.');\n  }\n  updateFileMessage(): Promise<SendbirdFileMessage> {\n    throw new Error('Method not implemented.');\n  }\n  cancelUploadingFileMessage(): Promise<boolean> {\n    throw new Error('Method not implemented.');\n  }\n  copyFileMessage(): Promise<SendbirdFileMessage> {\n    throw new Error('Method not implemented.');\n  }\n  deleteMessage(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  addReaction(): Promise<ReactionEvent> {\n    throw new Error('Method not implemented.');\n  }\n  deleteReaction(): Promise<ReactionEvent> {\n    throw new Error('Method not implemented.');\n  }\n  createMessageMetaArrayKeys(): Promise<SendbirdBaseMessage> {\n    throw new Error('Method not implemented.');\n  }\n  deleteMessageMetaArrayKeys(): Promise<SendbirdBaseMessage> {\n    throw new Error('Method not implemented.');\n  }\n  addMessageMetaArrayValues(): Promise<SendbirdBaseMessage> {\n    throw new Error('Method not implemented.');\n  }\n  removeMessageMetaArrayValues(): Promise<SendbirdBaseMessage> {\n    throw new Error('Method not implemented.');\n  }\n  report(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  reportUser(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  reportMessage(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  isOpenChannel(): this is SendbirdOpenChannel {\n    return this.channelType === ChannelType.OPEN;\n  }\n  isGroupChannel(): this is SendbirdGroupChannel {\n    return this.channelType === ChannelType.GROUP;\n  }\n  isFeedChannel(): this is SendbirdFeedChannel {\n    return this.channelType === ChannelType.FEED;\n  }\n  asOpenChannel(): SendbirdOpenChannel {\n    return this as unknown as SendbirdOpenChannel;\n  }\n  asGroupChannel(): SendbirdGroupChannel {\n    return this as unknown as SendbirdGroupChannel;\n  }\n\n  acceptInvitation = jest.fn();\n\n  addMember = jest.fn();\n\n  addPollOption = jest.fn();\n\n  get cachedUndeliveredMemberState(): object {\n    return {};\n  }\n\n  get cachedUnreadMemberState(): object {\n    return {};\n  }\n\n  cancelScheduledMessage = jest.fn();\n\n  closePoll = jest.fn();\n\n  createPollListQuery(): PollListQuery {\n    throw new Error('Method not implemented.');\n  }\n\n  createPollVoterListQuery(): PollVoterListQuery {\n    throw new Error('Method not implemented.');\n  }\n\n  deletePoll(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  deletePollOption(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  endTyping(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  getMyPushTriggerOption(): Promise<PushTriggerOption> {\n    throw new Error('Method not implemented.');\n  }\n\n  getPollChangeLogsSinceTimestamp(): Promise<PollChangelogs> {\n    throw new Error('Method not implemented.');\n  }\n\n  getPollChangeLogsSinceToken(): Promise<PollChangelogs> {\n    throw new Error('Method not implemented.');\n  }\n\n  getReadMembers(): SendbirdMember[] {\n    return [];\n  }\n\n  getReadStatus(): { [p: string]: ReadStatus } {\n    return {};\n  }\n\n  getTypingUsers(): SendbirdMember[] {\n    return [];\n  }\n  getDeliveryStatus(): { [p: string]: DeliveryStatus } {\n    return {};\n  }\n\n  getUndeliveredMemberCount = jest.fn(() => 0);\n\n  getUnreadMemberCount = jest.fn(() => 0);\n\n  getUnreadMembers = jest.fn(() => []);\n\n  hide(): Promise<SendbirdGroupChannel> {\n    throw new Error('Method not implemented.');\n  }\n\n  invalidateTypingStatus(): boolean {\n    return false;\n  }\n\n  invite(): Promise<SendbirdGroupChannel> {\n    throw new Error('Method not implemented.');\n  }\n\n  inviteWithUserIds(): Promise<SendbirdGroupChannel> {\n    throw new Error('Method not implemented.');\n  }\n\n  get isHidden(): boolean {\n    return false;\n  }\n\n  isReadMessage(): boolean {\n    return false;\n  }\n\n  get isTyping(): boolean {\n    return false;\n  }\n\n  join(): Promise<SendbirdGroupChannel> {\n    throw new Error('Method not implemented.');\n  }\n\n  leave(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  markAsDelivered(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  markAsRead(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  pinMessage(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  removeMember(): boolean {\n    throw new Error('Method not implemented.');\n  }\n\n  resetMyHistory(): Promise<SendbirdGroupChannel> {\n    throw new Error('Method not implemented.');\n  }\n\n  sendScheduledMessageNow(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  setMyCountPreference(): Promise<CountPreference> {\n    throw new Error('Method not implemented.');\n  }\n\n  setMyPushTriggerOption(): Promise<PushTriggerOption> {\n    throw new Error('Method not implemented.');\n  }\n\n  startTyping(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  unhide(): Promise<SendbirdGroupChannel> {\n    throw new Error('Method not implemented.');\n  }\n\n  unpinMessage(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  updatePoll(): Promise<Poll> {\n    throw new Error('Method not implemented.');\n  }\n\n  updatePollOption(): Promise<Poll> {\n    throw new Error('Method not implemented.');\n  }\n\n  updateScheduledFileMessage(): Promise<SendbirdFileMessage> {\n    throw new Error('Method not implemented.');\n  }\n\n  updateScheduledUserMessage(): Promise<SendbirdUserMessage> {\n    throw new Error('Method not implemented.');\n  }\n\n  votePoll(): Promise<PollVoteEvent> {\n    throw new Error('Method not implemented.');\n  }\n\n  createScheduledFileMessage(): MessageRequestHandler {\n    throw new Error('Method not implemented.');\n  }\n\n  createScheduledUserMessage(): MessageRequestHandler {\n    throw new Error('Method not implemented.');\n  }\n\n  declineInvitation(): Promise<SendbirdGroupChannel> {\n    throw new Error('Method not implemented.');\n  }\n\n  get messageCollectionLastAccessedAt(): number {\n    throw new Error('Method not implemented.');\n  }\n\n  createThreadedParentMessageListQuery(): PreviousMessageListQuery {\n    throw new Error('Method not implemented.');\n  }\n  createPinnedMessageListQuery(_params?: PinnedMessageListQueryParams | undefined): PinnedMessageListQuery {\n    throw new Error('Method not implemented.');\n  }\n  sendMultipleFilesMessage(_params: MultipleFilesMessageCreateParams): MultipleFilesMessageRequestHandler {\n    throw new Error('Method not implemented.');\n  }\n  uploadFile(): Promise<FileUploadResult> {\n    throw new Error('Method not implemented.');\n  }\n}\n"],"mappings":"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"}