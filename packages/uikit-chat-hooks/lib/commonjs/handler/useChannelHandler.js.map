{"version":3,"names":["_react","require","_groupChannel","_openChannel","useChannelHandler","sdk","handlerId","hookHandler","type","arguments","length","undefined","handlerRef","useRef","useLayoutEffect","current","useEffect","handlerMapper","handler","handlerKeys","Object","keys","forEach","key","_handlerRef$current","_handlerRef$current$k","_len","args","Array","_key","call","groupChannel","addGroupChannelHandler","GroupChannelHandler","openChannel","addOpenChannelHandler","OpenChannelHandler","removeGroupChannelHandler","removeOpenChannelHandler","exports"],"sources":["useChannelHandler.ts"],"sourcesContent":["import { useEffect, useLayoutEffect, useRef } from 'react';\n\nimport { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport { OpenChannelHandler } from '@sendbird/chat/openChannel';\nimport type { SendbirdChatSDK } from '@sendbird/uikit-utils';\n\ntype ChannelType = 'open' | 'group';\n\nexport const useChannelHandler = <T extends ChannelType = 'group'>(\n  sdk: SendbirdChatSDK,\n  handlerId: string,\n  hookHandler: Partial<T extends 'group' ? GroupChannelHandler : OpenChannelHandler>,\n  type: T = 'group' as T,\n) => {\n  const handlerRef = useRef(hookHandler);\n  useLayoutEffect(() => {\n    handlerRef.current = hookHandler;\n  });\n\n  useEffect(() => {\n    const handlerMapper = <T extends GroupChannelHandler | OpenChannelHandler>(handler: T): T => {\n      const handlerKeys = Object.keys(handler) as (keyof T)[];\n      handlerKeys.forEach((key) => {\n        // @ts-ignore\n        handler[key] = (...args: unknown[]) => handlerRef.current?.[key]?.(...args);\n      });\n      return handler;\n    };\n\n    if (type === 'group') {\n      sdk.groupChannel.addGroupChannelHandler(handlerId, handlerMapper(new GroupChannelHandler()));\n    } else if (type === 'open') {\n      sdk.openChannel.addOpenChannelHandler(handlerId, handlerMapper(new OpenChannelHandler()));\n    }\n\n    return () => {\n      if (type === 'group') {\n        sdk.groupChannel.removeGroupChannelHandler(handlerId);\n      } else if (type === 'open') {\n        sdk.openChannel.removeOpenChannelHandler(handlerId);\n      }\n    };\n  }, [sdk, handlerId]);\n};\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AAKO,MAAMG,iBAAiB,GAAG,SAAAA,CAC/BC,GAAoB,EACpBC,SAAiB,EACjBC,WAAkF,EAE/E;EAAA,IADHC,IAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,OAAO;EAEjB,MAAMG,UAAU,GAAG,IAAAC,aAAM,EAACN,WAAW,CAAC;EACtC,IAAAO,sBAAe,EAAC,MAAM;IACpBF,UAAU,CAACG,OAAO,GAAGR,WAAW;EAClC,CAAC,CAAC;EAEF,IAAAS,gBAAS,EAAC,MAAM;IACd,MAAMC,aAAa,GAAwDC,OAAU,IAAQ;MAC3F,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAgB;MACvDC,WAAW,CAACG,OAAO,CAAEC,GAAG,IAAK;QAC3B;QACAL,OAAO,CAACK,GAAG,CAAC,GAAG;UAAA,IAAAC,mBAAA,EAAAC,qBAAA;UAAA,SAAAC,IAAA,GAAAjB,SAAA,CAAAC,MAAA,EAAIiB,IAAI,OAAAC,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;YAAJF,IAAI,CAAAE,IAAA,IAAApB,SAAA,CAAAoB,IAAA;UAAA;UAAA,QAAAL,mBAAA,GAAgBZ,UAAU,CAACG,OAAO,cAAAS,mBAAA,wBAAAC,qBAAA,GAAlBD,mBAAA,CAAqBD,GAAG,CAAC,cAAAE,qBAAA,uBAAzBA,qBAAA,CAAAK,IAAA,CAAAN,mBAAA,EAA4B,GAAGG,IAAI,CAAC;QAAA;MAC7E,CAAC,CAAC;MACF,OAAOT,OAAO;IAChB,CAAC;IAED,IAAIV,IAAI,KAAK,OAAO,EAAE;MACpBH,GAAG,CAAC0B,YAAY,CAACC,sBAAsB,CAAC1B,SAAS,EAAEW,aAAa,CAAC,IAAIgB,iCAAmB,EAAE,CAAC,CAAC;IAC9F,CAAC,MAAM,IAAIzB,IAAI,KAAK,MAAM,EAAE;MAC1BH,GAAG,CAAC6B,WAAW,CAACC,qBAAqB,CAAC7B,SAAS,EAAEW,aAAa,CAAC,IAAImB,+BAAkB,EAAE,CAAC,CAAC;IAC3F;IAEA,OAAO,MAAM;MACX,IAAI5B,IAAI,KAAK,OAAO,EAAE;QACpBH,GAAG,CAAC0B,YAAY,CAACM,yBAAyB,CAAC/B,SAAS,CAAC;MACvD,CAAC,MAAM,IAAIE,IAAI,KAAK,MAAM,EAAE;QAC1BH,GAAG,CAAC6B,WAAW,CAACI,wBAAwB,CAAChC,SAAS,CAAC;MACrD;IACF,CAAC;EACH,CAAC,EAAE,CAACD,GAAG,EAAEC,SAAS,CAAC,CAAC;AACtB,CAAC;AAACiC,OAAA,CAAAnC,iBAAA,GAAAA,iBAAA"}