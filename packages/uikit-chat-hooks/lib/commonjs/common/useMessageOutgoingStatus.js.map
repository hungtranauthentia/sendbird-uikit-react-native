{"version":3,"names":["_uikitUtils","require","_useChannelHandler","_useAppFeatures","useMessageOutgoingStatus","sdk","channel","message","features","useAppFeatures","forceUpdate","useForceUpdate","currentUser","handlerId","useUniqHandlerId","useChannelHandler","onUndeliveredMemberStatusUpdated","eventChannel","isDifferentChannel","isMyMessage","userId","onUnreadMemberStatusUpdated","sendingStatus","isBroadcast","isSuper","getUnreadMemberCount","deliveryReceiptEnabled","getUndeliveredMemberCount","exports"],"sources":["useMessageOutgoingStatus.ts"],"sourcesContent":["import type { SendbirdChatSDK, SendbirdGroupChannel, SendbirdMessage } from '@sendbird/uikit-utils';\nimport { isDifferentChannel, isMyMessage, useForceUpdate, useUniqHandlerId } from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../handler/useChannelHandler';\nimport { useAppFeatures } from './useAppFeatures';\n\nexport type SBUOutgoingStatus = 'NONE' | 'PENDING' | 'FAILED' | 'UNDELIVERED' | 'DELIVERED' | 'UNREAD' | 'READ';\n\nexport const useMessageOutgoingStatus = (\n  sdk: SendbirdChatSDK,\n  channel: SendbirdGroupChannel,\n  message?: SendbirdMessage | null,\n): SBUOutgoingStatus => {\n  const features = useAppFeatures(sdk);\n  const forceUpdate = useForceUpdate();\n  const currentUser = sdk.currentUser;\n  const handlerId = useUniqHandlerId('useMessageOutgoingStatus');\n\n  useChannelHandler(sdk, handlerId, {\n    onUndeliveredMemberStatusUpdated(eventChannel) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (!isMyMessage(message, currentUser?.userId)) return;\n\n      forceUpdate();\n    },\n    onUnreadMemberStatusUpdated(eventChannel) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (!isMyMessage(message, currentUser?.userId)) return;\n\n      forceUpdate();\n    },\n  });\n\n  if (!message) return 'NONE';\n\n  if ('sendingStatus' in message) {\n    if (message.sendingStatus === 'pending') return 'PENDING';\n    if (message.sendingStatus === 'failed') return 'FAILED';\n  }\n\n  if (channel.isBroadcast || channel.isSuper) return 'NONE';\n\n  if (channel.getUnreadMemberCount(message) === 0) return 'READ';\n\n  if (features.deliveryReceiptEnabled) {\n    if (channel.getUndeliveredMemberCount(message) === 0) return 'DELIVERED';\n    return 'UNDELIVERED';\n  }\n\n  return 'UNREAD';\n};\n"],"mappings":";;;;;;AACA,IAAAA,WAAA,GAAAC,OAAA;AAEA,IAAAC,kBAAA,GAAAD,OAAA;AACA,IAAAE,eAAA,GAAAF,OAAA;AAIO,MAAMG,wBAAwB,GAAGA,CACtCC,GAAoB,EACpBC,OAA6B,EAC7BC,OAAgC,KACV;EACtB,MAAMC,QAAQ,GAAG,IAAAC,8BAAc,EAACJ,GAAG,CAAC;EACpC,MAAMK,WAAW,GAAG,IAAAC,0BAAc,GAAE;EACpC,MAAMC,WAAW,GAAGP,GAAG,CAACO,WAAW;EACnC,MAAMC,SAAS,GAAG,IAAAC,4BAAgB,EAAC,0BAA0B,CAAC;EAE9D,IAAAC,oCAAiB,EAACV,GAAG,EAAEQ,SAAS,EAAE;IAChCG,gCAAgCA,CAACC,YAAY,EAAE;MAC7C,IAAI,IAAAC,8BAAkB,EAACZ,OAAO,EAAEW,YAAY,CAAC,EAAE;MAC/C,IAAI,CAAC,IAAAE,uBAAW,EAACZ,OAAO,EAAEK,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEQ,MAAM,CAAC,EAAE;MAEhDV,WAAW,EAAE;IACf,CAAC;IACDW,2BAA2BA,CAACJ,YAAY,EAAE;MACxC,IAAI,IAAAC,8BAAkB,EAACZ,OAAO,EAAEW,YAAY,CAAC,EAAE;MAC/C,IAAI,CAAC,IAAAE,uBAAW,EAACZ,OAAO,EAAEK,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEQ,MAAM,CAAC,EAAE;MAEhDV,WAAW,EAAE;IACf;EACF,CAAC,CAAC;EAEF,IAAI,CAACH,OAAO,EAAE,OAAO,MAAM;EAE3B,IAAI,eAAe,IAAIA,OAAO,EAAE;IAC9B,IAAIA,OAAO,CAACe,aAAa,KAAK,SAAS,EAAE,OAAO,SAAS;IACzD,IAAIf,OAAO,CAACe,aAAa,KAAK,QAAQ,EAAE,OAAO,QAAQ;EACzD;EAEA,IAAIhB,OAAO,CAACiB,WAAW,IAAIjB,OAAO,CAACkB,OAAO,EAAE,OAAO,MAAM;EAEzD,IAAIlB,OAAO,CAACmB,oBAAoB,CAAClB,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,MAAM;EAE9D,IAAIC,QAAQ,CAACkB,sBAAsB,EAAE;IACnC,IAAIpB,OAAO,CAACqB,yBAAyB,CAACpB,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,WAAW;IACxE,OAAO,aAAa;EACtB;EAEA,OAAO,QAAQ;AACjB,CAAC;AAACqB,OAAA,CAAAxB,wBAAA,GAAAA,wBAAA"}