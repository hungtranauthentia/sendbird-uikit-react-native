{"version":3,"names":["_react","require","_message","_uikitUtils","defaultReducer","_ref","action","draft","type","value","status","userId","currentUserId","clearBeforeAction","messagesToObject","messages","nextMessages","filter","next","isMyMessage","prev","reqId","messageId","shouldUpdate","shouldUpdateMessage","obj","newMessages","it","isNewMessage","arrayToMapWithGetter","getMessageUniqId","messageKeys","map","forEach","key","messageIds","msgId","message","isSendableMessage","reqIds","reduce","accum","curr","sendingStatus","SendingStatus","SUCCEEDED","useChannelMessagesReducer","sortComparator","loading","refreshing","messageMap","newMessageMap","dispatch","useReducer","updateMessages","deleteMessages","updateNewMessages","deleteNewMessages","updateLoading","updateRefreshing","useIIFE","Array","from","Set","Object","values","sort","exports"],"sources":["useChannelMessagesReducer.ts"],"sourcesContent":["import { useReducer } from 'react';\n\nimport { SendableMessage } from '@sendbird/chat/lib/__definition';\nimport { SendingStatus } from '@sendbird/chat/message';\nimport type { SendbirdBaseMessage } from '@sendbird/uikit-utils';\nimport {\n  SendbirdMessage,\n  arrayToMapWithGetter,\n  getMessageUniqId,\n  isMyMessage,\n  isNewMessage,\n  isSendableMessage,\n  useIIFE,\n} from '@sendbird/uikit-utils';\n\ntype Options = {\n  sortComparator?: (a: SendbirdMessage, b: SendbirdMessage) => number;\n};\n\ntype Action =\n  | {\n      type: 'update_loading' | 'update_refreshing';\n      value: { status: boolean };\n    }\n  | {\n      type: 'update_messages' | 'update_new_messages';\n      value: { messages: SendbirdBaseMessage[]; clearBeforeAction: boolean; currentUserId?: string };\n    }\n  | {\n      type: 'delete_messages' | 'delete_new_messages';\n      value: { messageIds: (string | number)[]; reqIds: string[] };\n    };\n\ntype State = {\n  loading: boolean;\n  refreshing: boolean;\n  messageMap: Record<string, SendbirdBaseMessage>;\n  newMessageMap: Record<string, SendbirdBaseMessage>;\n};\n\nconst defaultReducer = ({ ...draft }: State, action: Action) => {\n  switch (action.type) {\n    case 'update_refreshing': {\n      draft['refreshing'] = action.value.status;\n      return draft;\n    }\n    case 'update_loading': {\n      draft['loading'] = action.value.status;\n      return draft;\n    }\n    case 'update_messages': {\n      const userId = action.value.currentUserId;\n\n      if (action.value.clearBeforeAction) {\n        draft['messageMap'] = messagesToObject(action.value.messages);\n      } else {\n        // Filtering meaningless message updates\n        const nextMessages = action.value.messages.filter((next) => {\n          if (isMyMessage(next, userId)) {\n            const prev = draft['messageMap'][next.reqId] ?? draft['messageMap'][next.messageId];\n            if (isMyMessage(prev, userId)) {\n              const shouldUpdate = shouldUpdateMessage(prev, next);\n              if (shouldUpdate) {\n                // Remove existing messages before update to prevent duplicate display\n                delete draft['messageMap'][prev.reqId];\n                delete draft['messageMap'][prev.messageId];\n              }\n              return shouldUpdate;\n            }\n          }\n          return true;\n        });\n\n        const obj = messagesToObject(nextMessages);\n        draft['messageMap'] = { ...draft['messageMap'], ...obj };\n      }\n\n      return draft;\n    }\n    case 'update_new_messages': {\n      const userId = action.value.currentUserId;\n      const newMessages = action.value.messages.filter((it) => isNewMessage(it, userId));\n\n      if (action.value.clearBeforeAction) {\n        draft['newMessageMap'] = arrayToMapWithGetter(newMessages, getMessageUniqId);\n      } else {\n        // Remove existing messages before update to prevent duplicate display\n        const messageKeys = newMessages.map((it) => it.messageId);\n        messageKeys.forEach((key) => delete draft['newMessageMap'][key]);\n\n        draft['newMessageMap'] = {\n          ...draft['newMessageMap'],\n          ...arrayToMapWithGetter(newMessages, getMessageUniqId),\n        };\n      }\n\n      return draft;\n    }\n    case 'delete_messages':\n    case 'delete_new_messages': {\n      const key = action.type === 'delete_messages' ? 'messageMap' : 'newMessageMap';\n      draft[key] = { ...draft[key] };\n      action.value.messageIds.forEach((msgId) => {\n        const message = draft[key][msgId];\n        if (message) {\n          if (isSendableMessage(message)) delete draft[key][message.reqId];\n          delete draft[key][message.messageId];\n        }\n      });\n      action.value.reqIds.forEach((reqId) => {\n        const message = draft[key][reqId];\n        if (message) {\n          if (isSendableMessage(message)) delete draft[key][message.reqId];\n          delete draft[key][message.messageId];\n        }\n      });\n\n      return draft;\n    }\n  }\n};\n\nconst messagesToObject = (messages: SendbirdBaseMessage[]) => {\n  return messages.reduce((accum, curr) => {\n    if (isSendableMessage(curr)) {\n      accum[curr.reqId] = curr;\n      if (curr.sendingStatus === SendingStatus.SUCCEEDED) {\n        accum[curr.messageId] = curr;\n      }\n    } else {\n      accum[curr.messageId] = curr;\n    }\n    return accum;\n  }, {} as Record<string, SendbirdBaseMessage>);\n};\n\nconst shouldUpdateMessage = (prev: SendableMessage, next: SendableMessage) => {\n  // message data update (e.g. reactions)\n  if (prev.sendingStatus === SendingStatus.SUCCEEDED) return next.sendingStatus === SendingStatus.SUCCEEDED;\n\n  // message sending status update\n  return prev.sendingStatus !== next.sendingStatus;\n};\n\nexport const useChannelMessagesReducer = (sortComparator?: Options['sortComparator']) => {\n  const [{ loading, refreshing, messageMap, newMessageMap }, dispatch] = useReducer(defaultReducer, {\n    loading: true,\n    refreshing: false,\n    messageMap: {},\n    newMessageMap: {},\n  });\n\n  const updateMessages = (messages: SendbirdBaseMessage[], clearBeforeAction: boolean, currentUserId?: string) => {\n    dispatch({ type: 'update_messages', value: { messages, clearBeforeAction, currentUserId } });\n  };\n  const deleteMessages = (messageIds: (string | number)[], reqIds: string[]) => {\n    dispatch({ type: 'delete_messages', value: { messageIds, reqIds } });\n  };\n  const updateNewMessages = (messages: SendbirdBaseMessage[], clearBeforeAction: boolean, currentUserId?: string) => {\n    dispatch({ type: 'update_new_messages', value: { messages, clearBeforeAction, currentUserId } });\n  };\n  const deleteNewMessages = (messageIds: number[], reqIds: string[]) => {\n    dispatch({ type: 'delete_new_messages', value: { messageIds, reqIds } });\n  };\n  const updateLoading = (status: boolean) => {\n    dispatch({ type: 'update_loading', value: { status } });\n  };\n  const updateRefreshing = (status: boolean) => {\n    dispatch({ type: 'update_refreshing', value: { status } });\n  };\n\n  const messages = useIIFE(() => {\n    if (sortComparator) return Array.from(new Set(Object.values(messageMap))).sort(sortComparator);\n    return Array.from(new Set(Object.values(messageMap)));\n  });\n  const newMessages = Object.values(newMessageMap);\n\n  return {\n    updateLoading,\n    updateRefreshing,\n    updateMessages,\n    deleteMessages,\n\n    loading,\n    refreshing,\n    messages,\n\n    newMessages,\n    updateNewMessages,\n    deleteNewMessages,\n  };\n};\n"],"mappings":"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"}