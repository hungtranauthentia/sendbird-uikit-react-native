{"version":3,"names":["_react","require","_uikitUtils","_useChannelHandler","_useChannelMessagesReducer","createMessageQuery","channel","options","queryCreator","params","limit","reverse","replyType","createPreviousMessageListQuery","useGroupChannelMessagesWithQuery","sdk","userId","queryRef","useRef","handlerId","useUniqHandlerId","forceUpdate","useForceUpdate","loading","refreshing","messages","newMessages","updateMessages","deleteMessages","updateNewMessages","deleteNewMessages","updateLoading","updateRefreshing","useChannelMessagesReducer","sortComparator","channelMarkAsRead","confirmAndMarkAsRead","e","Logger","warn","init","useFreshCallback","uid","_sdk$currentUser","_queryRef$current","currentUser","current","hasNext","_queryRef$current2","_sdk$currentUser2","list","load","channelUpdater","isGroupChannel","isDifferentChannel","useChannelHandler","onMessageReceived","eventChannel","message","_sdk$currentUser3","_sdk$currentUser4","_options$shouldCountN","isMyMessage","shouldCountNewMessages","call","_sdk$currentUser5","onMessagesReceived","onMessageUpdated","_sdk$currentUser6","_sdk$currentUser7","onMessageDeleted","messageId","onReactionUpdated","reactionEvent","_sdk$currentUser8","getMessage","includeReactions","includeParentMessageInfo","includeThreadInfo","includeMetaArray","channelUrl","url","channelType","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onChannelHidden","onChannelMemberCountChanged","channels","foundChannel","find","c","onChannelDeleted","_options$onChannelDel","onOperatorUpdated","onUserLeft","onUserJoined","onUserUnbanned","onUserMuted","onUserUnmuted","onUserBanned","bannedUser","_sdk$currentUser9","_options$onChannelDel2","useAsyncEffect","refresh","prev","_queryRef$current3","_queryRef$current4","_sdk$currentUser10","hasPrev","_queryRef$current5","next","ASYNC_NOOP","sendUserMessage","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","_sdk$currentUser11","onSucceeded","sentMessage","_sdk$currentUser12","onFailed","err","failedMessage","_sdk$currentUser13","sendFileMessage","isFileMessage","_sdk$currentUser14","_sdk$currentUser15","_sdk$currentUser16","updateUserMessage","_sdk$currentUser17","updatedMessage","updateFileMessage","_sdk$currentUser18","resendMessage","_sdk$currentUser19","resendUserMessage","resendFileMessage","deleteMessage","sendingStatus","reqId","resetNewMessages","_sdk$currentUser20","resetWithStartingPoint","exports"],"sources":["useGroupChannelMessagesWithQuery.ts"],"sourcesContent":["import { useRef } from 'react';\n\nimport type { BaseMessage, PreviousMessageListQueryParams } from '@sendbird/chat/message';\nimport type {\n  SendbirdBaseChannel,\n  SendbirdGroupChannel,\n  SendbirdPreviousMessageListQuery,\n} from '@sendbird/uikit-utils';\nimport {\n  ASYNC_NOOP,\n  Logger,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  isMyMessage,\n  useAsyncEffect,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst createMessageQuery = (channel: SendbirdGroupChannel, options?: UseGroupChannelMessagesOptions) => {\n  if (options?.queryCreator) return options.queryCreator();\n\n  const params: PreviousMessageListQueryParams = { limit: 100, reverse: true };\n  if (options?.replyType) params.replyType = options.replyType;\n\n  return channel.createPreviousMessageListQuery(params);\n};\n\nexport const useGroupChannelMessagesWithQuery: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const queryRef = useRef<SendbirdPreviousMessageListQuery>();\n  const handlerId = useUniqHandlerId('useGroupChannelMessagesWithQuery');\n\n  const forceUpdate = useForceUpdate();\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    deleteMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const channelMarkAsRead = async () => {\n    try {\n      await confirmAndMarkAsRead([channel]);\n    } catch (e) {\n      Logger.warn('[useGroupChannelMessagesWithQuery/channelMarkAsRead]', e);\n    }\n  };\n\n  const init = useFreshCallback(async (uid?: string) => {\n    if (uid) {\n      channelMarkAsRead();\n      updateNewMessages([], true, sdk.currentUser?.userId);\n\n      queryRef.current = createMessageQuery(channel, options);\n      if (queryRef.current?.hasNext) {\n        const list = await queryRef.current?.load();\n        updateMessages(list, true, sdk.currentUser?.userId);\n      }\n    }\n  });\n\n  const channelUpdater = (channel: SendbirdBaseChannel) => {\n    if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n      forceUpdate();\n    }\n  };\n\n  useChannelHandler(sdk, handlerId, {\n    // Messages\n    onMessageReceived(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (isMyMessage(message, sdk.currentUser?.userId)) return;\n\n      channelMarkAsRead();\n\n      updateMessages([message], false, sdk.currentUser?.userId);\n      if (options?.shouldCountNewMessages?.()) {\n        updateNewMessages([message], false, sdk.currentUser?.userId);\n      }\n      if (options?.onMessagesReceived) {\n        options.onMessagesReceived([message]);\n      }\n    },\n    onMessageUpdated(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (isMyMessage(message, sdk.currentUser?.userId)) return;\n\n      updateMessages([message], false, sdk.currentUser?.userId);\n    },\n    onMessageDeleted(eventChannel, messageId) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      deleteMessages([messageId], []);\n      deleteNewMessages([messageId], []);\n    },\n    async onReactionUpdated(eventChannel, reactionEvent) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n\n      const message = await sdk.message.getMessage({\n        messageId: reactionEvent.messageId,\n        includeReactions: true,\n        includeParentMessageInfo: true,\n        includeThreadInfo: true,\n        includeMetaArray: true,\n        channelUrl: channel.url,\n        channelType: channel.channelType,\n      });\n      if (message) updateMessages([message as BaseMessage], false, sdk.currentUser?.userId);\n    },\n    // Channels\n    onChannelChanged: channelUpdater,\n    onChannelFrozen: channelUpdater,\n    onChannelUnfrozen: channelUpdater,\n    onChannelHidden: channelUpdater,\n    onChannelMemberCountChanged(channels) {\n      const foundChannel = channels.find((c) => !isDifferentChannel(c, channel));\n      if (foundChannel) channelUpdater(foundChannel);\n    },\n    onChannelDeleted(channelUrl: string) {\n      if (channel.url === channelUrl) options?.onChannelDeleted?.();\n    },\n    // Users\n    onOperatorUpdated: channelUpdater,\n    onUserLeft: channelUpdater,\n    // onUserEntered: channelUpdater,\n    // onUserExited: channelUpdater,\n    onUserJoined: channelUpdater,\n    onUserUnbanned: channelUpdater,\n    onUserMuted: channelUpdater,\n    onUserUnmuted: channelUpdater,\n    onUserBanned(eventChannel, bannedUser) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n\n      if (bannedUser.userId === sdk.currentUser?.userId) {\n        options?.onChannelDeleted?.();\n      } else {\n        channelUpdater(eventChannel);\n      }\n    },\n  });\n\n  useAsyncEffect(async () => {\n    updateLoading(true);\n    await init(userId);\n    updateLoading(false);\n  }, [channel.url, userId]);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    await init(userId);\n    updateRefreshing(false);\n  });\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (queryRef.current && queryRef.current?.hasNext) {\n      const list = await queryRef.current?.load();\n      updateMessages(list, false, sdk.currentUser?.userId);\n    }\n  });\n  const hasPrev: ReturnType<UseGroupChannelMessages>['hasPrev'] = useFreshCallback(\n    () => queryRef.current?.hasNext ?? false,\n  );\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useFreshCallback(ASYNC_NOOP);\n  const hasNext: ReturnType<UseGroupChannelMessages>['hasNext'] = useFreshCallback(() => false);\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useFreshCallback(\n    async (failedMessage) => {\n      const message = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (message) updateMessages([message], false, sdk.currentUser?.userId);\n    },\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      deleteMessages([message.messageId], [message.reqId]);\n    }\n  });\n  const resetNewMessages: ReturnType<UseGroupChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser?.userId);\n  });\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    newMessages,\n    resetNewMessages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetWithStartingPoint() {\n      Logger.warn('resetWithStartingPoint is not supported in Query, please use Collection instead.');\n    },\n  };\n};\n"],"mappings":"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"}