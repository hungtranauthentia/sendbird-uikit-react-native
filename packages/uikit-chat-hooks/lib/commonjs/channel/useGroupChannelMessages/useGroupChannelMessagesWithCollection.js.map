{"version":3,"names":["_react","require","_chat","_groupChannel","_uikitUtils","_useChannelHandler","_useChannelMessagesReducer","MESSAGE_LIMIT","DEFAULT","SEARCH","createMessageCollection","channel","limit","options","collectionCreator","startingPoint","filter","MessageFilter","replyType","isNotEmpty","arr","length","shouldUseSearchLimit","Date","now","useGroupChannelMessagesWithCollection","sdk","userId","initialStartingPoint","Number","MAX_SAFE_INTEGER","initialLimit","forceUpdate","useForceUpdate","collectionRef","useRef","collectionInitializedRef","handlerId","useUniqHandlerId","loading","refreshing","messages","newMessages","updateMessages","updateNewMessages","deleteNewMessages","deleteMessages","updateLoading","updateRefreshing","useChannelMessagesReducer","sortComparator","channelMarkAsRead","source","CollectionEventSource","EVENT_MESSAGE_RECEIVED","EVENT_MESSAGE_SENT_SUCCESS","SYNC_MESSAGE_FILL","undefined","confirmAndMarkAsRead","e","Logger","warn","updateNewMessagesReceived","incomingMessages","it","_sdk$currentUser","isMyMessage","currentUser","_options$shouldCountN","_sdk$currentUser2","_options$onMessagesRe","shouldCountNewMessages","call","onMessagesReceived","updateUnsentMessages","_sdk$currentUser3","_sdk$currentUser4","pendingMessages","failedMessages","current","init","useFreshCallback","callback","_collectionRef$curren","_sdk$currentUser5","_collectionRef$curren2","dispose","setMessageCollectionHandler","onMessagesAdded","ctx","__","_sdk$currentUser6","onMessagesUpdated","_sdk$currentUser7","EVENT_MESSAGE_UPDATED","_options$onMessagesUp","onMessagesDeleted","_","___","msgIds","map","messageId","reqIds","isSendableMessage","reqId","onChannelDeleted","_options$onChannelDel","onChannelUpdated","eventChannel","isGroupChannel","isDifferentChannel","onHugeGapDetected","initialize","MessageCollectionInitPolicy","CACHE_AND_REPLACE_BY_API","onCacheResult","err","isCacheEnabled","error","_sdk$currentUser8","debug","onApiResult","_sdk$currentUser9","_options$onMessagesRe2","useChannelHandler","onUserBanned","bannedUser","_sdk$currentUser10","_options$onChannelDel2","useEffect","setTimeout","url","_collectionRef$curren3","refresh","prev","_collectionRef$curren4","hasPrevious","_collectionRef$curren5","_sdk$currentUser11","list","loadPrevious","hasPrev","next","_collectionRef$curren6","hasNext","_collectionRef$curren7","_sdk$currentUser12","fetchedList","loadNext","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","_sdk$currentUser13","onSucceeded","sentMessage","_sdk$currentUser14","onFailed","failedMessage","_sdk$currentUser15","sendFileMessage","isFileMessage","_sdk$currentUser16","_sdk$currentUser17","_sdk$currentUser18","updateUserMessage","_sdk$currentUser19","updatedMessage","updateFileMessage","_sdk$currentUser20","resendMessage","_sdk$currentUser21","resentMessage","resendUserMessage","resendFileMessage","deleteMessage","message","sendingStatus","_collectionRef$curren8","removeFailedMessage","resetNewMessages","_sdk$currentUser22","resetWithStartingPoint","_sdk$currentUser23","exports"],"sources":["useGroupChannelMessagesWithCollection.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { CollectionEventSource } from '@sendbird/chat';\nimport { MessageCollectionInitPolicy, MessageFilter } from '@sendbird/chat/groupChannel';\nimport type { SendbirdFileMessage, SendbirdGroupChannel, SendbirdMessageCollection } from '@sendbird/uikit-utils';\nimport {\n  Logger,\n  SendbirdBaseMessage,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  isMyMessage,\n  isSendableMessage,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst MESSAGE_LIMIT = {\n  DEFAULT: 50,\n  SEARCH: 20,\n};\n\nconst createMessageCollection = (\n  channel: SendbirdGroupChannel,\n  limit: number,\n  options: UseGroupChannelMessagesOptions,\n) => {\n  if (options?.collectionCreator) return options?.collectionCreator({ startingPoint: options?.startingPoint });\n\n  const filter = new MessageFilter();\n  if (options.replyType) filter.replyType = options.replyType;\n\n  return channel.createMessageCollection({ filter, limit, startingPoint: options?.startingPoint });\n};\n\nfunction isNotEmpty(arr?: unknown[]): arr is unknown[] {\n  if (!arr) return false;\n  return arr.length !== 0;\n}\n\nfunction shouldUseSearchLimit(startingPoint: number) {\n  return startingPoint < Date.now();\n}\n\nexport const useGroupChannelMessagesWithCollection: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const initialStartingPoint = options?.startingPoint ?? Number.MAX_SAFE_INTEGER;\n  const initialLimit = shouldUseSearchLimit(initialStartingPoint) ? MESSAGE_LIMIT.SEARCH : MESSAGE_LIMIT.DEFAULT;\n\n  const forceUpdate = useForceUpdate();\n  const collectionRef = useRef<SendbirdMessageCollection>();\n  const collectionInitializedRef = useRef(false);\n  const handlerId = useUniqHandlerId('useGroupChannelMessagesWithCollection');\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    deleteMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const channelMarkAsRead = async (source?: CollectionEventSource) => {\n    try {\n      switch (source) {\n        case CollectionEventSource.EVENT_MESSAGE_RECEIVED:\n        case CollectionEventSource.EVENT_MESSAGE_SENT_SUCCESS:\n        case CollectionEventSource.SYNC_MESSAGE_FILL:\n        case undefined:\n          await confirmAndMarkAsRead([channel]);\n          break;\n      }\n    } catch (e) {\n      Logger.warn('[useGroupChannelMessagesWithCollection/channelMarkAsRead]', e);\n    }\n  };\n  const updateNewMessagesReceived = (source: CollectionEventSource, messages: SendbirdBaseMessage[]) => {\n    const incomingMessages = messages.filter((it) => !isMyMessage(it, sdk.currentUser?.userId));\n    if (incomingMessages.length > 0) {\n      switch (source) {\n        case CollectionEventSource.EVENT_MESSAGE_RECEIVED:\n        case CollectionEventSource.SYNC_MESSAGE_FILL: {\n          if (options?.shouldCountNewMessages?.()) updateNewMessages(incomingMessages, false, sdk.currentUser?.userId);\n          options?.onMessagesReceived?.(incomingMessages);\n          break;\n        }\n      }\n    }\n  };\n\n  const updateUnsentMessages = () => {\n    const { pendingMessages, failedMessages } = collectionRef.current ?? {};\n    if (isNotEmpty(pendingMessages)) updateMessages(pendingMessages, false, sdk.currentUser?.userId);\n    if (isNotEmpty(failedMessages)) updateMessages(failedMessages, false, sdk.currentUser?.userId);\n  };\n\n  const init = useFreshCallback(async (startingPoint: number, limit: number, callback?: () => void) => {\n    if (collectionRef.current) collectionRef.current?.dispose();\n\n    channelMarkAsRead();\n    updateNewMessages([], true, sdk.currentUser?.userId);\n\n    collectionInitializedRef.current = false;\n    collectionRef.current = createMessageCollection(channel, limit, {\n      ...options,\n      startingPoint,\n    });\n\n    collectionRef.current?.setMessageCollectionHandler({\n      onMessagesAdded: (ctx, __, messages) => {\n        channelMarkAsRead(ctx.source);\n        updateNewMessagesReceived(ctx.source, messages);\n\n        updateMessages(messages, false, sdk.currentUser?.userId);\n      },\n      onMessagesUpdated: (ctx, __, messages) => {\n        channelMarkAsRead(ctx.source);\n        updateNewMessagesReceived(ctx.source, messages); // NOTE: admin message is not added via onMessagesAdded handler, not checked yet is this a bug.\n\n        updateMessages(messages, false, sdk.currentUser?.userId);\n\n        if (ctx.source === CollectionEventSource.EVENT_MESSAGE_UPDATED) {\n          options?.onMessagesUpdated?.(messages);\n        }\n      },\n      onMessagesDeleted: (_, __, ___, messages) => {\n        const msgIds = messages.map((it) => it.messageId);\n        const reqIds = messages.filter(isSendableMessage).map((it) => it.reqId);\n        deleteMessages(msgIds, reqIds);\n        deleteNewMessages(msgIds, reqIds);\n      },\n      onChannelDeleted: () => {\n        options?.onChannelDeleted?.();\n      },\n      onChannelUpdated: (_, eventChannel) => {\n        if (eventChannel.isGroupChannel() && !isDifferentChannel(eventChannel, channel)) {\n          forceUpdate();\n        }\n      },\n      onHugeGapDetected: () => {\n        init(Number.MAX_SAFE_INTEGER, MESSAGE_LIMIT.DEFAULT);\n      },\n    });\n\n    collectionRef.current\n      .initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API)\n      .onCacheResult((err, messages) => {\n        if (err) sdk.isCacheEnabled && Logger.error('[useGroupChannelMessagesWithCollection/onCacheResult]', err);\n        else if (messages) {\n          Logger.debug('[useGroupChannelMessagesWithCollection/onCacheResult]', 'message length:', messages.length);\n\n          updateMessages(messages, true, sdk.currentUser?.userId);\n          updateUnsentMessages();\n        }\n\n        callback?.();\n      })\n      .onApiResult((err, messages) => {\n        if (err) Logger.warn('[useGroupChannelMessagesWithCollection/onApiResult]', err);\n        else if (messages) {\n          Logger.debug('[useGroupChannelMessagesWithCollection/onApiResult]', 'message length:', messages.length);\n\n          updateMessages(messages, true, sdk.currentUser?.userId);\n          if (!options?.startingPoint) options?.onMessagesReceived?.(messages);\n          if (sdk.isCacheEnabled) updateUnsentMessages();\n        }\n\n        collectionInitializedRef.current = true;\n        callback?.();\n      });\n  });\n\n  useChannelHandler(sdk, handlerId, {\n    onUserBanned(channel, bannedUser) {\n      if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n        if (bannedUser.userId === sdk.currentUser?.userId) {\n          options?.onChannelDeleted?.();\n        } else {\n          forceUpdate();\n        }\n      }\n    },\n  });\n\n  useEffect(() => {\n    // NOTE: Cache read is heavy task, and it prevents smooth ui transition\n    setTimeout(async () => {\n      updateLoading(true);\n      init(initialStartingPoint, initialLimit, () => updateLoading(false));\n    }, 0);\n  }, [channel.url, userId, options?.replyType]);\n\n  useEffect(() => {\n    return () => {\n      if (collectionRef.current) collectionRef.current?.dispose();\n    };\n  }, []);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    init(Number.MAX_SAFE_INTEGER, MESSAGE_LIMIT.DEFAULT, () => updateRefreshing(false));\n  });\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (collectionRef.current && collectionRef.current?.hasPrevious) {\n      try {\n        const list = await collectionRef.current?.loadPrevious();\n        updateMessages(list, false, sdk.currentUser?.userId);\n      } catch {}\n    }\n  });\n\n  const hasPrev: ReturnType<UseGroupChannelMessages>['hasPrev'] = useFreshCallback(() => {\n    if (collectionInitializedRef.current && collectionRef.current) {\n      return collectionRef.current.hasPrevious;\n    } else {\n      return false;\n    }\n  });\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useFreshCallback(async () => {\n    if (collectionRef.current && collectionRef.current?.hasNext) {\n      try {\n        const fetchedList = await collectionRef.current?.loadNext();\n        updateMessages(fetchedList, false, sdk.currentUser?.userId);\n      } catch {}\n    }\n  });\n\n  const hasNext: ReturnType<UseGroupChannelMessages>['hasNext'] = useFreshCallback(() => {\n    if (collectionInitializedRef.current && collectionRef.current) {\n      return collectionRef.current.hasNext;\n    } else {\n      return false;\n    }\n  });\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              onPending?.(pendingMessage);\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage as SendbirdFileMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useFreshCallback(\n    async (failedMessage) => {\n      const resentMessage = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (resentMessage) updateMessages([resentMessage], false, sdk.currentUser?.userId);\n    },\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      try {\n        await collectionRef.current?.removeFailedMessage(message.reqId);\n      } finally {\n        deleteMessages([message.messageId], [message.reqId]);\n      }\n    }\n  });\n  const resetNewMessages: ReturnType<UseGroupChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser?.userId);\n  });\n  const resetWithStartingPoint: ReturnType<UseGroupChannelMessages>['resetWithStartingPoint'] = useFreshCallback(\n    (startingPoint, callback) => {\n      const limit = shouldUseSearchLimit(startingPoint) ? MESSAGE_LIMIT.SEARCH : MESSAGE_LIMIT.DEFAULT;\n      updateLoading(true);\n      updateMessages([], true, sdk.currentUser?.userId);\n      init(startingPoint, limit, () => {\n        updateLoading(false);\n        callback?.();\n      });\n    },\n  );\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    newMessages,\n    resetNewMessages,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetWithStartingPoint,\n  };\n};\n"],"mappings":"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"}