{"version":3,"names":["_react","require","_uikitUtils","_useChannelHandler","_useConnectionHandler","_useChannelMessagesReducer","createMessageQuery","channel","creator","createPreviousMessageListQuery","limit","reverse","useOpenChannelMessagesWithQuery","sdk","userId","options","queryRef","useRef","forceUpdate","useForceUpdate","handlerId","useUniqHandlerId","loading","refreshing","messages","newMessages","updateMessages","updateNewMessages","deleteNewMessages","deleteMessages","updateLoading","updateRefreshing","useChannelMessagesReducer","sortComparator","init","useFreshCallback","uid","_queryRef$current","_sdk$currentUser2","current","queryCreator","hasNext","_queryRef$current2","_sdk$currentUser","list","load","currentUser","channelUpdater","isOpenChannel","isDifferentChannel","useConnectionHandler","onReconnectSucceeded","_queryRef$current3","_queryRef$current4","_queryRef$current5","_queryRef$current6","_queryRef$current7","_queryRef$current8","_queryRef$current9","_queryRef$current10","_queryRef$current11","_queryRef$current12","_queryRef$current13","_queryRef$current14","_queryRef$current15","_queryRef$current16","_queryRef$current17","_queryRef$current18","_sdk$currentUser3","lastMessage","messageContext","updatedMessages","addedMessages","deletedMessageIds","changeLogsContext","hasMore","token","messageQueryContext","timestamp","createdAt","changelogsParams","replyType","includeMetaArray","includeReactions","includeThreadInfo","includeParentMessageInfo","changeLogsByTS","getMessageChangeLogsSinceTimestamp","push","changeLogsByToken","getMessageChangeLogsSinceToken","messageQueryParams","prevResultSize","nextResultSize","customTypesFilter","messageTypeFilter","senderUserIdsFilter","showSubchannelMessagesOnly","queriedMessages","getMessagesByTimestamp","length","unshift","_options$shouldCountN","shouldCountNewMessages","call","_sdk$currentUser4","onMessagesReceived","useChannelHandler","onMessageReceived","eventChannel","message","_sdk$currentUser5","_sdk$currentUser6","_options$shouldCountN2","isMyMessage","_sdk$currentUser7","onMessageUpdated","_sdk$currentUser8","_sdk$currentUser9","onMessageDeleted","messageId","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onChannelParticipantCountChanged","onChannelDeleted","channelUrl","type","url","_options$onChannelDel","onOperatorUpdated","onUserUnbanned","onUserMuted","onUserUnmuted","onUserBanned","bannedUser","_sdk$currentUser10","_options$onChannelDel2","useAsyncEffect","enter","error","_options$onError","_options$onChannelDel3","onError","exit","catch","NOOP","refresh","prev","_queryRef$current19","_queryRef$current20","_sdk$currentUser11","hasPrev","_queryRef$current21","next","ASYNC_NOOP","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","_sdk$currentUser12","onSucceeded","sentMessage","_sdk$currentUser13","onFailed","err","failedMessage","_sdk$currentUser14","sendFileMessage","isFileMessage","_sdk$currentUser15","_sdk$currentUser16","_sdk$currentUser17","updateUserMessage","_sdk$currentUser18","updatedMessage","updateFileMessage","_sdk$currentUser19","resendMessage","_sdk$currentUser20","resendUserMessage","resendFileMessage","deleteMessage","sendingStatus","reqId","resetNewMessages","_sdk$currentUser21","exports"],"sources":["useOpenChannelMessagesWithQuery.ts"],"sourcesContent":["import { useRef } from 'react';\n\nimport { MessageListParams } from '@sendbird/chat/message';\nimport type {\n  SendbirdBaseChannel,\n  SendbirdBaseMessage,\n  SendbirdOpenChannel,\n  SendbirdPreviousMessageListQuery,\n} from '@sendbird/uikit-utils';\nimport {\n  ASYNC_NOOP,\n  NOOP,\n  isDifferentChannel,\n  isMyMessage,\n  useAsyncEffect,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport { useConnectionHandler } from '../../handler/useConnectionHandler';\nimport type { UseOpenChannelMessages, UseOpenChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst createMessageQuery = (channel: SendbirdOpenChannel, creator?: UseOpenChannelMessagesOptions['queryCreator']) => {\n  if (creator) return creator();\n  return channel.createPreviousMessageListQuery({\n    limit: 100,\n    reverse: true,\n  });\n};\n\nexport const useOpenChannelMessagesWithQuery: UseOpenChannelMessages = (sdk, channel, userId, options) => {\n  const queryRef = useRef<SendbirdPreviousMessageListQuery>();\n  const forceUpdate = useForceUpdate();\n  const handlerId = useUniqHandlerId('useOpenChannelMessagesWithQuery');\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    deleteMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const init = useFreshCallback(async (uid?: string) => {\n    if (uid) {\n      queryRef.current = createMessageQuery(channel, options?.queryCreator);\n      if (queryRef.current?.hasNext) {\n        const list = await queryRef.current?.load();\n\n        updateMessages(list, true, sdk.currentUser?.userId);\n      }\n      updateNewMessages([], true, sdk.currentUser?.userId);\n    }\n  });\n\n  const channelUpdater = (channel: SendbirdBaseChannel) => {\n    if (channel.isOpenChannel() && !isDifferentChannel(channel, channel)) {\n      forceUpdate();\n    }\n  };\n\n  useConnectionHandler(sdk, handlerId, {\n    async onReconnectSucceeded() {\n      const lastMessage = messages[0];\n      if (!lastMessage) return;\n\n      const messageContext = {\n        updatedMessages: [] as SendbirdBaseMessage[],\n        addedMessages: [] as SendbirdBaseMessage[],\n        deletedMessageIds: [] as (number | string)[],\n      };\n      const changeLogsContext = {\n        hasMore: false,\n        token: '',\n      };\n      const messageQueryContext = {\n        hasMore: false,\n        timestamp: lastMessage.createdAt,\n      };\n\n      // Updated & Deleted messages\n      const changelogsParams = {\n        replyType: queryRef.current?.replyType,\n        includeMetaArray: queryRef.current?.includeMetaArray,\n        includeReactions: queryRef.current?.includeReactions,\n        includeThreadInfo: queryRef.current?.includeThreadInfo,\n        includeParentMessageInfo: queryRef.current?.includeParentMessageInfo,\n      };\n\n      const changeLogsByTS = await channel.getMessageChangeLogsSinceTimestamp(lastMessage.createdAt);\n      changeLogsContext.token = changeLogsByTS.token;\n      changeLogsContext.hasMore = changeLogsByTS.hasMore;\n      messageContext.updatedMessages.push(...changeLogsByTS.updatedMessages);\n      messageContext.deletedMessageIds.push(...changeLogsByTS.deletedMessageIds);\n\n      while (changeLogsContext.hasMore) {\n        const changeLogsByToken = await channel.getMessageChangeLogsSinceToken(changeLogsByTS.token, changelogsParams);\n        changeLogsContext.token = changeLogsByToken.token;\n        changeLogsContext.hasMore = changeLogsByToken.hasMore;\n        messageContext.updatedMessages.push(...changeLogsByToken.updatedMessages);\n        messageContext.deletedMessageIds.push(...changeLogsByToken.deletedMessageIds);\n      }\n\n      // Added messages\n      const messageQueryParams: MessageListParams = {\n        prevResultSize: 0,\n        nextResultSize: queryRef.current?.limit ?? 100,\n        reverse: queryRef.current?.reverse,\n        includeParentMessageInfo: queryRef.current?.includeParentMessageInfo,\n        includeThreadInfo: queryRef.current?.includeThreadInfo,\n        includeReactions: queryRef.current?.includeReactions,\n        includeMetaArray: queryRef.current?.includeMetaArray,\n        replyType: queryRef.current?.replyType,\n        customTypesFilter: queryRef.current?.customTypesFilter as never,\n        messageTypeFilter: queryRef.current?.messageTypeFilter,\n        senderUserIdsFilter: queryRef.current?.senderUserIdsFilter as never,\n        showSubchannelMessagesOnly: queryRef.current?.showSubchannelMessagesOnly,\n      };\n\n      const queriedMessages = await channel.getMessagesByTimestamp(lastMessage.createdAt, messageQueryParams);\n      messageQueryContext.hasMore = queriedMessages.length > 0;\n      if (messageQueryContext.hasMore) {\n        messageQueryContext.timestamp = queriedMessages[0].createdAt;\n        messageContext.addedMessages.unshift(...queriedMessages);\n      }\n\n      while (messageQueryContext.hasMore) {\n        const queriedMessages = await channel.getMessagesByTimestamp(messageQueryContext.timestamp, messageQueryParams);\n        messageQueryContext.hasMore = queriedMessages.length > 0;\n        if (messageQueryContext.hasMore) {\n          messageQueryContext.timestamp = queriedMessages[0].createdAt;\n          messageContext.addedMessages.unshift(...queriedMessages);\n        }\n      }\n\n      // Update to View\n      updateMessages(\n        [...messageContext.addedMessages, ...messageContext.updatedMessages],\n        false,\n        sdk.currentUser?.userId,\n      );\n      deleteMessages(messageContext.deletedMessageIds, []);\n\n      if (messageContext.addedMessages.length > 0) {\n        if (options?.shouldCountNewMessages?.()) {\n          updateNewMessages(messageContext.addedMessages, false, sdk.currentUser?.userId);\n        }\n        if (options?.onMessagesReceived) {\n          options.onMessagesReceived(messageContext.addedMessages);\n        }\n      }\n    },\n  });\n\n  useChannelHandler(\n    sdk,\n    handlerId,\n    {\n      // Messages\n      onMessageReceived(eventChannel, message) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        if (isMyMessage(message, sdk.currentUser?.userId)) return;\n\n        updateMessages([message], false, sdk.currentUser?.userId);\n        if (options?.shouldCountNewMessages?.()) {\n          updateNewMessages([message], false, sdk.currentUser?.userId);\n        }\n        if (options?.onMessagesReceived) {\n          options.onMessagesReceived([message]);\n        }\n      },\n      onMessageUpdated(eventChannel, message) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        if (isMyMessage(message, sdk.currentUser?.userId)) return;\n\n        updateMessages([message], false, sdk.currentUser?.userId);\n      },\n      onMessageDeleted(eventChannel, messageId) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        deleteMessages([messageId], []);\n        deleteNewMessages([messageId], []);\n      },\n      // Channels\n      onChannelChanged: channelUpdater,\n      onChannelFrozen: channelUpdater,\n      onChannelUnfrozen: channelUpdater,\n      onChannelParticipantCountChanged(eventChannel) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n        channelUpdater(eventChannel);\n      },\n      onChannelDeleted(channelUrl, type) {\n        if (channel.url === channelUrl && type === 'open') {\n          options?.onChannelDeleted?.();\n        }\n      },\n      // Users\n      onOperatorUpdated: channelUpdater,\n      onUserUnbanned: channelUpdater,\n      onUserMuted: channelUpdater,\n      onUserUnmuted: channelUpdater,\n      onUserBanned(eventChannel, bannedUser) {\n        if (isDifferentChannel(channel, eventChannel)) return;\n\n        if (bannedUser.userId === sdk.currentUser?.userId) {\n          options?.onChannelDeleted?.();\n        } else {\n          channelUpdater(eventChannel);\n        }\n      },\n    },\n    'open',\n  );\n\n  useAsyncEffect(async () => {\n    updateLoading(true);\n\n    try {\n      await channel.enter();\n      await init(userId);\n    } catch (error) {\n      options?.onError?.(error);\n      options?.onChannelDeleted?.();\n    } finally {\n      updateLoading(false);\n    }\n\n    return () => {\n      channel.exit().catch(NOOP);\n    };\n  }, [channel.url, userId]);\n\n  const refresh: ReturnType<UseOpenChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    await init(userId);\n    updateRefreshing(false);\n  });\n\n  const prev: ReturnType<UseOpenChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (queryRef.current && queryRef.current?.hasNext) {\n      const list = await queryRef.current?.load();\n      updateMessages(list, false, sdk.currentUser?.userId);\n    }\n  });\n  const hasPrev: ReturnType<UseOpenChannelMessages>['hasPrev'] = useFreshCallback(\n    () => queryRef.current?.hasNext ?? false,\n  );\n\n  const next: ReturnType<UseOpenChannelMessages>['next'] = useFreshCallback(ASYNC_NOOP);\n  const hasNext: ReturnType<UseOpenChannelMessages>['hasNext'] = useFreshCallback(() => false);\n\n  const sendUserMessage: ReturnType<UseOpenChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n\n  const sendFileMessage: ReturnType<UseOpenChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n\n  const updateUserMessage: ReturnType<UseOpenChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseOpenChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseOpenChannelMessages>['resendMessage'] = useFreshCallback(async (failedMessage) => {\n    const message = await (() => {\n      if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n      if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n      return null;\n    })();\n\n    if (message) updateMessages([message], false, sdk.currentUser?.userId);\n  });\n  const deleteMessage: ReturnType<UseOpenChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      deleteMessages([message.messageId], [message.reqId]);\n    }\n  });\n  const resetNewMessages: ReturnType<UseOpenChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser?.userId);\n  });\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    newMessages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetNewMessages,\n  };\n};\n"],"mappings":"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"}