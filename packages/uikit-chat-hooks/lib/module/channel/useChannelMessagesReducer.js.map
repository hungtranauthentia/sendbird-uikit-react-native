{"version":3,"names":["useReducer","SendingStatus","arrayToMapWithGetter","getMessageUniqId","isMyMessage","isNewMessage","isSendableMessage","useIIFE","defaultReducer","_ref","action","draft","type","value","status","userId","currentUserId","clearBeforeAction","messagesToObject","messages","nextMessages","filter","next","prev","reqId","messageId","shouldUpdate","shouldUpdateMessage","obj","newMessages","it","messageKeys","map","forEach","key","messageIds","msgId","message","reqIds","reduce","accum","curr","sendingStatus","SUCCEEDED","useChannelMessagesReducer","sortComparator","loading","refreshing","messageMap","newMessageMap","dispatch","updateMessages","deleteMessages","updateNewMessages","deleteNewMessages","updateLoading","updateRefreshing","Array","from","Set","Object","values","sort"],"sources":["useChannelMessagesReducer.ts"],"sourcesContent":["import { useReducer } from 'react';\n\nimport { SendableMessage } from '@sendbird/chat/lib/__definition';\nimport { SendingStatus } from '@sendbird/chat/message';\nimport type { SendbirdBaseMessage } from '@sendbird/uikit-utils';\nimport {\n  SendbirdMessage,\n  arrayToMapWithGetter,\n  getMessageUniqId,\n  isMyMessage,\n  isNewMessage,\n  isSendableMessage,\n  useIIFE,\n} from '@sendbird/uikit-utils';\n\ntype Options = {\n  sortComparator?: (a: SendbirdMessage, b: SendbirdMessage) => number;\n};\n\ntype Action =\n  | {\n      type: 'update_loading' | 'update_refreshing';\n      value: { status: boolean };\n    }\n  | {\n      type: 'update_messages' | 'update_new_messages';\n      value: { messages: SendbirdBaseMessage[]; clearBeforeAction: boolean; currentUserId?: string };\n    }\n  | {\n      type: 'delete_messages' | 'delete_new_messages';\n      value: { messageIds: (string | number)[]; reqIds: string[] };\n    };\n\ntype State = {\n  loading: boolean;\n  refreshing: boolean;\n  messageMap: Record<string, SendbirdBaseMessage>;\n  newMessageMap: Record<string, SendbirdBaseMessage>;\n};\n\nconst defaultReducer = ({ ...draft }: State, action: Action) => {\n  switch (action.type) {\n    case 'update_refreshing': {\n      draft['refreshing'] = action.value.status;\n      return draft;\n    }\n    case 'update_loading': {\n      draft['loading'] = action.value.status;\n      return draft;\n    }\n    case 'update_messages': {\n      const userId = action.value.currentUserId;\n\n      if (action.value.clearBeforeAction) {\n        draft['messageMap'] = messagesToObject(action.value.messages);\n      } else {\n        // Filtering meaningless message updates\n        const nextMessages = action.value.messages.filter((next) => {\n          if (isMyMessage(next, userId)) {\n            const prev = draft['messageMap'][next.reqId] ?? draft['messageMap'][next.messageId];\n            if (isMyMessage(prev, userId)) {\n              const shouldUpdate = shouldUpdateMessage(prev, next);\n              if (shouldUpdate) {\n                // Remove existing messages before update to prevent duplicate display\n                delete draft['messageMap'][prev.reqId];\n                delete draft['messageMap'][prev.messageId];\n              }\n              return shouldUpdate;\n            }\n          }\n          return true;\n        });\n\n        const obj = messagesToObject(nextMessages);\n        draft['messageMap'] = { ...draft['messageMap'], ...obj };\n      }\n\n      return draft;\n    }\n    case 'update_new_messages': {\n      const userId = action.value.currentUserId;\n      const newMessages = action.value.messages.filter((it) => isNewMessage(it, userId));\n\n      if (action.value.clearBeforeAction) {\n        draft['newMessageMap'] = arrayToMapWithGetter(newMessages, getMessageUniqId);\n      } else {\n        // Remove existing messages before update to prevent duplicate display\n        const messageKeys = newMessages.map((it) => it.messageId);\n        messageKeys.forEach((key) => delete draft['newMessageMap'][key]);\n\n        draft['newMessageMap'] = {\n          ...draft['newMessageMap'],\n          ...arrayToMapWithGetter(newMessages, getMessageUniqId),\n        };\n      }\n\n      return draft;\n    }\n    case 'delete_messages':\n    case 'delete_new_messages': {\n      const key = action.type === 'delete_messages' ? 'messageMap' : 'newMessageMap';\n      draft[key] = { ...draft[key] };\n      action.value.messageIds.forEach((msgId) => {\n        const message = draft[key][msgId];\n        if (message) {\n          if (isSendableMessage(message)) delete draft[key][message.reqId];\n          delete draft[key][message.messageId];\n        }\n      });\n      action.value.reqIds.forEach((reqId) => {\n        const message = draft[key][reqId];\n        if (message) {\n          if (isSendableMessage(message)) delete draft[key][message.reqId];\n          delete draft[key][message.messageId];\n        }\n      });\n\n      return draft;\n    }\n  }\n};\n\nconst messagesToObject = (messages: SendbirdBaseMessage[]) => {\n  return messages.reduce((accum, curr) => {\n    if (isSendableMessage(curr)) {\n      accum[curr.reqId] = curr;\n      if (curr.sendingStatus === SendingStatus.SUCCEEDED) {\n        accum[curr.messageId] = curr;\n      }\n    } else {\n      accum[curr.messageId] = curr;\n    }\n    return accum;\n  }, {} as Record<string, SendbirdBaseMessage>);\n};\n\nconst shouldUpdateMessage = (prev: SendableMessage, next: SendableMessage) => {\n  // message data update (e.g. reactions)\n  if (prev.sendingStatus === SendingStatus.SUCCEEDED) return next.sendingStatus === SendingStatus.SUCCEEDED;\n\n  // message sending status update\n  return prev.sendingStatus !== next.sendingStatus;\n};\n\nexport const useChannelMessagesReducer = (sortComparator?: Options['sortComparator']) => {\n  const [{ loading, refreshing, messageMap, newMessageMap }, dispatch] = useReducer(defaultReducer, {\n    loading: true,\n    refreshing: false,\n    messageMap: {},\n    newMessageMap: {},\n  });\n\n  const updateMessages = (messages: SendbirdBaseMessage[], clearBeforeAction: boolean, currentUserId?: string) => {\n    dispatch({ type: 'update_messages', value: { messages, clearBeforeAction, currentUserId } });\n  };\n  const deleteMessages = (messageIds: (string | number)[], reqIds: string[]) => {\n    dispatch({ type: 'delete_messages', value: { messageIds, reqIds } });\n  };\n  const updateNewMessages = (messages: SendbirdBaseMessage[], clearBeforeAction: boolean, currentUserId?: string) => {\n    dispatch({ type: 'update_new_messages', value: { messages, clearBeforeAction, currentUserId } });\n  };\n  const deleteNewMessages = (messageIds: number[], reqIds: string[]) => {\n    dispatch({ type: 'delete_new_messages', value: { messageIds, reqIds } });\n  };\n  const updateLoading = (status: boolean) => {\n    dispatch({ type: 'update_loading', value: { status } });\n  };\n  const updateRefreshing = (status: boolean) => {\n    dispatch({ type: 'update_refreshing', value: { status } });\n  };\n\n  const messages = useIIFE(() => {\n    if (sortComparator) return Array.from(new Set(Object.values(messageMap))).sort(sortComparator);\n    return Array.from(new Set(Object.values(messageMap)));\n  });\n  const newMessages = Object.values(newMessageMap);\n\n  return {\n    updateLoading,\n    updateRefreshing,\n    updateMessages,\n    deleteMessages,\n\n    loading,\n    refreshing,\n    messages,\n\n    newMessages,\n    updateNewMessages,\n    deleteNewMessages,\n  };\n};\n"],"mappings":"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"}