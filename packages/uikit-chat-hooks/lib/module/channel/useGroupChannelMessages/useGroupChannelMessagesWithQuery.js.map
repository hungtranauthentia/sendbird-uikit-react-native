{"version":3,"names":["useRef","ASYNC_NOOP","Logger","confirmAndMarkAsRead","isDifferentChannel","isMyMessage","useAsyncEffect","useForceUpdate","useFreshCallback","useUniqHandlerId","useChannelHandler","useChannelMessagesReducer","createMessageQuery","channel","options","queryCreator","params","limit","reverse","replyType","createPreviousMessageListQuery","useGroupChannelMessagesWithQuery","sdk","userId","queryRef","handlerId","forceUpdate","loading","refreshing","messages","newMessages","updateMessages","deleteMessages","updateNewMessages","deleteNewMessages","updateLoading","updateRefreshing","sortComparator","channelMarkAsRead","e","warn","init","uid","_sdk$currentUser","_queryRef$current","currentUser","current","hasNext","_queryRef$current2","_sdk$currentUser2","list","load","channelUpdater","isGroupChannel","onMessageReceived","eventChannel","message","_sdk$currentUser3","_sdk$currentUser4","_options$shouldCountN","shouldCountNewMessages","call","_sdk$currentUser5","onMessagesReceived","onMessageUpdated","_sdk$currentUser6","_sdk$currentUser7","onMessageDeleted","messageId","onReactionUpdated","reactionEvent","_sdk$currentUser8","getMessage","includeReactions","includeParentMessageInfo","includeThreadInfo","includeMetaArray","channelUrl","url","channelType","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onChannelHidden","onChannelMemberCountChanged","channels","foundChannel","find","c","onChannelDeleted","_options$onChannelDel","onOperatorUpdated","onUserLeft","onUserJoined","onUserUnbanned","onUserMuted","onUserUnmuted","onUserBanned","bannedUser","_sdk$currentUser9","_options$onChannelDel2","refresh","prev","_queryRef$current3","_queryRef$current4","_sdk$currentUser10","hasPrev","_queryRef$current5","next","sendUserMessage","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","_sdk$currentUser11","onSucceeded","sentMessage","_sdk$currentUser12","onFailed","err","failedMessage","_sdk$currentUser13","sendFileMessage","isFileMessage","_sdk$currentUser14","_sdk$currentUser15","_sdk$currentUser16","updateUserMessage","_sdk$currentUser17","updatedMessage","updateFileMessage","_sdk$currentUser18","resendMessage","_sdk$currentUser19","resendUserMessage","resendFileMessage","deleteMessage","sendingStatus","reqId","resetNewMessages","_sdk$currentUser20","resetWithStartingPoint"],"sources":["useGroupChannelMessagesWithQuery.ts"],"sourcesContent":["import { useRef } from 'react';\n\nimport type { BaseMessage, PreviousMessageListQueryParams } from '@sendbird/chat/message';\nimport type {\n  SendbirdBaseChannel,\n  SendbirdGroupChannel,\n  SendbirdPreviousMessageListQuery,\n} from '@sendbird/uikit-utils';\nimport {\n  ASYNC_NOOP,\n  Logger,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  isMyMessage,\n  useAsyncEffect,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst createMessageQuery = (channel: SendbirdGroupChannel, options?: UseGroupChannelMessagesOptions) => {\n  if (options?.queryCreator) return options.queryCreator();\n\n  const params: PreviousMessageListQueryParams = { limit: 100, reverse: true };\n  if (options?.replyType) params.replyType = options.replyType;\n\n  return channel.createPreviousMessageListQuery(params);\n};\n\nexport const useGroupChannelMessagesWithQuery: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const queryRef = useRef<SendbirdPreviousMessageListQuery>();\n  const handlerId = useUniqHandlerId('useGroupChannelMessagesWithQuery');\n\n  const forceUpdate = useForceUpdate();\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    deleteMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const channelMarkAsRead = async () => {\n    try {\n      await confirmAndMarkAsRead([channel]);\n    } catch (e) {\n      Logger.warn('[useGroupChannelMessagesWithQuery/channelMarkAsRead]', e);\n    }\n  };\n\n  const init = useFreshCallback(async (uid?: string) => {\n    if (uid) {\n      channelMarkAsRead();\n      updateNewMessages([], true, sdk.currentUser?.userId);\n\n      queryRef.current = createMessageQuery(channel, options);\n      if (queryRef.current?.hasNext) {\n        const list = await queryRef.current?.load();\n        updateMessages(list, true, sdk.currentUser?.userId);\n      }\n    }\n  });\n\n  const channelUpdater = (channel: SendbirdBaseChannel) => {\n    if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n      forceUpdate();\n    }\n  };\n\n  useChannelHandler(sdk, handlerId, {\n    // Messages\n    onMessageReceived(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (isMyMessage(message, sdk.currentUser?.userId)) return;\n\n      channelMarkAsRead();\n\n      updateMessages([message], false, sdk.currentUser?.userId);\n      if (options?.shouldCountNewMessages?.()) {\n        updateNewMessages([message], false, sdk.currentUser?.userId);\n      }\n      if (options?.onMessagesReceived) {\n        options.onMessagesReceived([message]);\n      }\n    },\n    onMessageUpdated(eventChannel, message) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (isMyMessage(message, sdk.currentUser?.userId)) return;\n\n      updateMessages([message], false, sdk.currentUser?.userId);\n    },\n    onMessageDeleted(eventChannel, messageId) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      deleteMessages([messageId], []);\n      deleteNewMessages([messageId], []);\n    },\n    async onReactionUpdated(eventChannel, reactionEvent) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n\n      const message = await sdk.message.getMessage({\n        messageId: reactionEvent.messageId,\n        includeReactions: true,\n        includeParentMessageInfo: true,\n        includeThreadInfo: true,\n        includeMetaArray: true,\n        channelUrl: channel.url,\n        channelType: channel.channelType,\n      });\n      if (message) updateMessages([message as BaseMessage], false, sdk.currentUser?.userId);\n    },\n    // Channels\n    onChannelChanged: channelUpdater,\n    onChannelFrozen: channelUpdater,\n    onChannelUnfrozen: channelUpdater,\n    onChannelHidden: channelUpdater,\n    onChannelMemberCountChanged(channels) {\n      const foundChannel = channels.find((c) => !isDifferentChannel(c, channel));\n      if (foundChannel) channelUpdater(foundChannel);\n    },\n    onChannelDeleted(channelUrl: string) {\n      if (channel.url === channelUrl) options?.onChannelDeleted?.();\n    },\n    // Users\n    onOperatorUpdated: channelUpdater,\n    onUserLeft: channelUpdater,\n    // onUserEntered: channelUpdater,\n    // onUserExited: channelUpdater,\n    onUserJoined: channelUpdater,\n    onUserUnbanned: channelUpdater,\n    onUserMuted: channelUpdater,\n    onUserUnmuted: channelUpdater,\n    onUserBanned(eventChannel, bannedUser) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n\n      if (bannedUser.userId === sdk.currentUser?.userId) {\n        options?.onChannelDeleted?.();\n      } else {\n        channelUpdater(eventChannel);\n      }\n    },\n  });\n\n  useAsyncEffect(async () => {\n    updateLoading(true);\n    await init(userId);\n    updateLoading(false);\n  }, [channel.url, userId]);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    await init(userId);\n    updateRefreshing(false);\n  });\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (queryRef.current && queryRef.current?.hasNext) {\n      const list = await queryRef.current?.load();\n      updateMessages(list, false, sdk.currentUser?.userId);\n    }\n  });\n  const hasPrev: ReturnType<UseGroupChannelMessages>['hasPrev'] = useFreshCallback(\n    () => queryRef.current?.hasNext ?? false,\n  );\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useFreshCallback(ASYNC_NOOP);\n  const hasNext: ReturnType<UseGroupChannelMessages>['hasNext'] = useFreshCallback(() => false);\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useFreshCallback(\n    async (failedMessage) => {\n      const message = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (message) updateMessages([message], false, sdk.currentUser?.userId);\n    },\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      deleteMessages([message.messageId], [message.reqId]);\n    }\n  });\n  const resetNewMessages: ReturnType<UseGroupChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser?.userId);\n  });\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    newMessages,\n    resetNewMessages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetWithStartingPoint() {\n      Logger.warn('resetWithStartingPoint is not supported in Query, please use Collection instead.');\n    },\n  };\n};\n"],"mappings":"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"}