{"version":3,"names":["useEffect","useRef","CollectionEventSource","MessageCollectionInitPolicy","MessageFilter","Logger","confirmAndMarkAsRead","isDifferentChannel","isMyMessage","isSendableMessage","useForceUpdate","useFreshCallback","useUniqHandlerId","useChannelHandler","useChannelMessagesReducer","MESSAGE_LIMIT","DEFAULT","SEARCH","createMessageCollection","channel","limit","options","collectionCreator","startingPoint","filter","replyType","isNotEmpty","arr","length","shouldUseSearchLimit","Date","now","useGroupChannelMessagesWithCollection","sdk","userId","initialStartingPoint","Number","MAX_SAFE_INTEGER","initialLimit","forceUpdate","collectionRef","collectionInitializedRef","handlerId","loading","refreshing","messages","newMessages","updateMessages","updateNewMessages","deleteNewMessages","deleteMessages","updateLoading","updateRefreshing","sortComparator","channelMarkAsRead","source","EVENT_MESSAGE_RECEIVED","EVENT_MESSAGE_SENT_SUCCESS","SYNC_MESSAGE_FILL","undefined","e","warn","updateNewMessagesReceived","incomingMessages","it","_sdk$currentUser","currentUser","_options$shouldCountN","_sdk$currentUser2","_options$onMessagesRe","shouldCountNewMessages","call","onMessagesReceived","updateUnsentMessages","_sdk$currentUser3","_sdk$currentUser4","pendingMessages","failedMessages","current","init","callback","_collectionRef$curren","_sdk$currentUser5","_collectionRef$curren2","dispose","setMessageCollectionHandler","onMessagesAdded","ctx","__","_sdk$currentUser6","onMessagesUpdated","_sdk$currentUser7","EVENT_MESSAGE_UPDATED","_options$onMessagesUp","onMessagesDeleted","_","___","msgIds","map","messageId","reqIds","reqId","onChannelDeleted","_options$onChannelDel","onChannelUpdated","eventChannel","isGroupChannel","onHugeGapDetected","initialize","CACHE_AND_REPLACE_BY_API","onCacheResult","err","isCacheEnabled","error","_sdk$currentUser8","debug","onApiResult","_sdk$currentUser9","_options$onMessagesRe2","onUserBanned","bannedUser","_sdk$currentUser10","_options$onChannelDel2","setTimeout","url","_collectionRef$curren3","refresh","prev","_collectionRef$curren4","hasPrevious","_collectionRef$curren5","_sdk$currentUser11","list","loadPrevious","hasPrev","next","_collectionRef$curren6","hasNext","_collectionRef$curren7","_sdk$currentUser12","fetchedList","loadNext","sendUserMessage","params","onPending","Promise","resolve","reject","pendingMessage","isUserMessage","_sdk$currentUser13","onSucceeded","sentMessage","_sdk$currentUser14","onFailed","failedMessage","_sdk$currentUser15","sendFileMessage","isFileMessage","_sdk$currentUser16","_sdk$currentUser17","_sdk$currentUser18","updateUserMessage","_sdk$currentUser19","updatedMessage","updateFileMessage","_sdk$currentUser20","resendMessage","_sdk$currentUser21","resentMessage","resendUserMessage","resendFileMessage","deleteMessage","message","sendingStatus","_collectionRef$curren8","removeFailedMessage","resetNewMessages","_sdk$currentUser22","resetWithStartingPoint","_sdk$currentUser23"],"sources":["useGroupChannelMessagesWithCollection.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { CollectionEventSource } from '@sendbird/chat';\nimport { MessageCollectionInitPolicy, MessageFilter } from '@sendbird/chat/groupChannel';\nimport type { SendbirdFileMessage, SendbirdGroupChannel, SendbirdMessageCollection } from '@sendbird/uikit-utils';\nimport {\n  Logger,\n  SendbirdBaseMessage,\n  confirmAndMarkAsRead,\n  isDifferentChannel,\n  isMyMessage,\n  isSendableMessage,\n  useForceUpdate,\n  useFreshCallback,\n  useUniqHandlerId,\n} from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../../handler/useChannelHandler';\nimport type { UseGroupChannelMessages, UseGroupChannelMessagesOptions } from '../../types';\nimport { useChannelMessagesReducer } from '../useChannelMessagesReducer';\n\nconst MESSAGE_LIMIT = {\n  DEFAULT: 50,\n  SEARCH: 20,\n};\n\nconst createMessageCollection = (\n  channel: SendbirdGroupChannel,\n  limit: number,\n  options: UseGroupChannelMessagesOptions,\n) => {\n  if (options?.collectionCreator) return options?.collectionCreator({ startingPoint: options?.startingPoint });\n\n  const filter = new MessageFilter();\n  if (options.replyType) filter.replyType = options.replyType;\n\n  return channel.createMessageCollection({ filter, limit, startingPoint: options?.startingPoint });\n};\n\nfunction isNotEmpty(arr?: unknown[]): arr is unknown[] {\n  if (!arr) return false;\n  return arr.length !== 0;\n}\n\nfunction shouldUseSearchLimit(startingPoint: number) {\n  return startingPoint < Date.now();\n}\n\nexport const useGroupChannelMessagesWithCollection: UseGroupChannelMessages = (sdk, channel, userId, options) => {\n  const initialStartingPoint = options?.startingPoint ?? Number.MAX_SAFE_INTEGER;\n  const initialLimit = shouldUseSearchLimit(initialStartingPoint) ? MESSAGE_LIMIT.SEARCH : MESSAGE_LIMIT.DEFAULT;\n\n  const forceUpdate = useForceUpdate();\n  const collectionRef = useRef<SendbirdMessageCollection>();\n  const collectionInitializedRef = useRef(false);\n  const handlerId = useUniqHandlerId('useGroupChannelMessagesWithCollection');\n\n  const {\n    loading,\n    refreshing,\n    messages,\n    newMessages,\n    updateMessages,\n    updateNewMessages,\n    deleteNewMessages,\n    deleteMessages,\n    updateLoading,\n    updateRefreshing,\n  } = useChannelMessagesReducer(options?.sortComparator);\n\n  const channelMarkAsRead = async (source?: CollectionEventSource) => {\n    try {\n      switch (source) {\n        case CollectionEventSource.EVENT_MESSAGE_RECEIVED:\n        case CollectionEventSource.EVENT_MESSAGE_SENT_SUCCESS:\n        case CollectionEventSource.SYNC_MESSAGE_FILL:\n        case undefined:\n          await confirmAndMarkAsRead([channel]);\n          break;\n      }\n    } catch (e) {\n      Logger.warn('[useGroupChannelMessagesWithCollection/channelMarkAsRead]', e);\n    }\n  };\n  const updateNewMessagesReceived = (source: CollectionEventSource, messages: SendbirdBaseMessage[]) => {\n    const incomingMessages = messages.filter((it) => !isMyMessage(it, sdk.currentUser?.userId));\n    if (incomingMessages.length > 0) {\n      switch (source) {\n        case CollectionEventSource.EVENT_MESSAGE_RECEIVED:\n        case CollectionEventSource.SYNC_MESSAGE_FILL: {\n          if (options?.shouldCountNewMessages?.()) updateNewMessages(incomingMessages, false, sdk.currentUser?.userId);\n          options?.onMessagesReceived?.(incomingMessages);\n          break;\n        }\n      }\n    }\n  };\n\n  const updateUnsentMessages = () => {\n    const { pendingMessages, failedMessages } = collectionRef.current ?? {};\n    if (isNotEmpty(pendingMessages)) updateMessages(pendingMessages, false, sdk.currentUser?.userId);\n    if (isNotEmpty(failedMessages)) updateMessages(failedMessages, false, sdk.currentUser?.userId);\n  };\n\n  const init = useFreshCallback(async (startingPoint: number, limit: number, callback?: () => void) => {\n    if (collectionRef.current) collectionRef.current?.dispose();\n\n    channelMarkAsRead();\n    updateNewMessages([], true, sdk.currentUser?.userId);\n\n    collectionInitializedRef.current = false;\n    collectionRef.current = createMessageCollection(channel, limit, {\n      ...options,\n      startingPoint,\n    });\n\n    collectionRef.current?.setMessageCollectionHandler({\n      onMessagesAdded: (ctx, __, messages) => {\n        channelMarkAsRead(ctx.source);\n        updateNewMessagesReceived(ctx.source, messages);\n\n        updateMessages(messages, false, sdk.currentUser?.userId);\n      },\n      onMessagesUpdated: (ctx, __, messages) => {\n        channelMarkAsRead(ctx.source);\n        updateNewMessagesReceived(ctx.source, messages); // NOTE: admin message is not added via onMessagesAdded handler, not checked yet is this a bug.\n\n        updateMessages(messages, false, sdk.currentUser?.userId);\n\n        if (ctx.source === CollectionEventSource.EVENT_MESSAGE_UPDATED) {\n          options?.onMessagesUpdated?.(messages);\n        }\n      },\n      onMessagesDeleted: (_, __, ___, messages) => {\n        const msgIds = messages.map((it) => it.messageId);\n        const reqIds = messages.filter(isSendableMessage).map((it) => it.reqId);\n        deleteMessages(msgIds, reqIds);\n        deleteNewMessages(msgIds, reqIds);\n      },\n      onChannelDeleted: () => {\n        options?.onChannelDeleted?.();\n      },\n      onChannelUpdated: (_, eventChannel) => {\n        if (eventChannel.isGroupChannel() && !isDifferentChannel(eventChannel, channel)) {\n          forceUpdate();\n        }\n      },\n      onHugeGapDetected: () => {\n        init(Number.MAX_SAFE_INTEGER, MESSAGE_LIMIT.DEFAULT);\n      },\n    });\n\n    collectionRef.current\n      .initialize(MessageCollectionInitPolicy.CACHE_AND_REPLACE_BY_API)\n      .onCacheResult((err, messages) => {\n        if (err) sdk.isCacheEnabled && Logger.error('[useGroupChannelMessagesWithCollection/onCacheResult]', err);\n        else if (messages) {\n          Logger.debug('[useGroupChannelMessagesWithCollection/onCacheResult]', 'message length:', messages.length);\n\n          updateMessages(messages, true, sdk.currentUser?.userId);\n          updateUnsentMessages();\n        }\n\n        callback?.();\n      })\n      .onApiResult((err, messages) => {\n        if (err) Logger.warn('[useGroupChannelMessagesWithCollection/onApiResult]', err);\n        else if (messages) {\n          Logger.debug('[useGroupChannelMessagesWithCollection/onApiResult]', 'message length:', messages.length);\n\n          updateMessages(messages, true, sdk.currentUser?.userId);\n          if (!options?.startingPoint) options?.onMessagesReceived?.(messages);\n          if (sdk.isCacheEnabled) updateUnsentMessages();\n        }\n\n        collectionInitializedRef.current = true;\n        callback?.();\n      });\n  });\n\n  useChannelHandler(sdk, handlerId, {\n    onUserBanned(channel, bannedUser) {\n      if (channel.isGroupChannel() && !isDifferentChannel(channel, channel)) {\n        if (bannedUser.userId === sdk.currentUser?.userId) {\n          options?.onChannelDeleted?.();\n        } else {\n          forceUpdate();\n        }\n      }\n    },\n  });\n\n  useEffect(() => {\n    // NOTE: Cache read is heavy task, and it prevents smooth ui transition\n    setTimeout(async () => {\n      updateLoading(true);\n      init(initialStartingPoint, initialLimit, () => updateLoading(false));\n    }, 0);\n  }, [channel.url, userId, options?.replyType]);\n\n  useEffect(() => {\n    return () => {\n      if (collectionRef.current) collectionRef.current?.dispose();\n    };\n  }, []);\n\n  const refresh: ReturnType<UseGroupChannelMessages>['refresh'] = useFreshCallback(async () => {\n    updateRefreshing(true);\n    init(Number.MAX_SAFE_INTEGER, MESSAGE_LIMIT.DEFAULT, () => updateRefreshing(false));\n  });\n\n  const prev: ReturnType<UseGroupChannelMessages>['prev'] = useFreshCallback(async () => {\n    if (collectionRef.current && collectionRef.current?.hasPrevious) {\n      try {\n        const list = await collectionRef.current?.loadPrevious();\n        updateMessages(list, false, sdk.currentUser?.userId);\n      } catch {}\n    }\n  });\n\n  const hasPrev: ReturnType<UseGroupChannelMessages>['hasPrev'] = useFreshCallback(() => {\n    if (collectionInitializedRef.current && collectionRef.current) {\n      return collectionRef.current.hasPrevious;\n    } else {\n      return false;\n    }\n  });\n\n  const next: ReturnType<UseGroupChannelMessages>['next'] = useFreshCallback(async () => {\n    if (collectionRef.current && collectionRef.current?.hasNext) {\n      try {\n        const fetchedList = await collectionRef.current?.loadNext();\n        updateMessages(fetchedList, false, sdk.currentUser?.userId);\n      } catch {}\n    }\n  });\n\n  const hasNext: ReturnType<UseGroupChannelMessages>['hasNext'] = useFreshCallback(() => {\n    if (collectionInitializedRef.current && collectionRef.current) {\n      return collectionRef.current.hasNext;\n    } else {\n      return false;\n    }\n  });\n\n  const sendUserMessage: ReturnType<UseGroupChannelMessages>['sendUserMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendUserMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isUserMessage()) {\n              onPending?.(pendingMessage);\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isUserMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n  const sendFileMessage: ReturnType<UseGroupChannelMessages>['sendFileMessage'] = useFreshCallback(\n    (params, onPending) => {\n      return new Promise((resolve, reject) => {\n        channel\n          .sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            if (pendingMessage.isFileMessage()) {\n              updateMessages([pendingMessage], false, sdk.currentUser?.userId);\n              onPending?.(pendingMessage);\n            }\n          })\n          .onSucceeded((sentMessage) => {\n            if (sentMessage.isFileMessage()) {\n              updateMessages([sentMessage], false, sdk.currentUser?.userId);\n              resolve(sentMessage as SendbirdFileMessage);\n            }\n          })\n          .onFailed((err, failedMessage) => {\n            if (failedMessage) {\n              updateMessages([failedMessage], false, sdk.currentUser?.userId);\n            }\n            reject(err);\n          });\n      });\n    },\n  );\n  const updateUserMessage: ReturnType<UseGroupChannelMessages>['updateUserMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateUserMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const updateFileMessage: ReturnType<UseGroupChannelMessages>['updateFileMessage'] = useFreshCallback(\n    async (messageId, params) => {\n      const updatedMessage = await channel.updateFileMessage(messageId, params);\n      updateMessages([updatedMessage], false, sdk.currentUser?.userId);\n      return updatedMessage;\n    },\n  );\n  const resendMessage: ReturnType<UseGroupChannelMessages>['resendMessage'] = useFreshCallback(\n    async (failedMessage) => {\n      const resentMessage = await (() => {\n        if (failedMessage.isUserMessage()) return channel.resendUserMessage(failedMessage);\n        if (failedMessage.isFileMessage()) return channel.resendFileMessage(failedMessage);\n        return null;\n      })();\n\n      if (resentMessage) updateMessages([resentMessage], false, sdk.currentUser?.userId);\n    },\n  );\n  const deleteMessage: ReturnType<UseGroupChannelMessages>['deleteMessage'] = useFreshCallback(async (message) => {\n    if (message.sendingStatus === 'succeeded') {\n      if (message.isUserMessage()) await channel.deleteMessage(message);\n      if (message.isFileMessage()) await channel.deleteMessage(message);\n    } else {\n      try {\n        await collectionRef.current?.removeFailedMessage(message.reqId);\n      } finally {\n        deleteMessages([message.messageId], [message.reqId]);\n      }\n    }\n  });\n  const resetNewMessages: ReturnType<UseGroupChannelMessages>['resetNewMessages'] = useFreshCallback(() => {\n    updateNewMessages([], true, sdk.currentUser?.userId);\n  });\n  const resetWithStartingPoint: ReturnType<UseGroupChannelMessages>['resetWithStartingPoint'] = useFreshCallback(\n    (startingPoint, callback) => {\n      const limit = shouldUseSearchLimit(startingPoint) ? MESSAGE_LIMIT.SEARCH : MESSAGE_LIMIT.DEFAULT;\n      updateLoading(true);\n      updateMessages([], true, sdk.currentUser?.userId);\n      init(startingPoint, limit, () => {\n        updateLoading(false);\n        callback?.();\n      });\n    },\n  );\n\n  return {\n    loading,\n    refreshing,\n    refresh,\n    messages,\n    next,\n    hasNext,\n    prev,\n    hasPrev,\n    newMessages,\n    resetNewMessages,\n    sendUserMessage,\n    sendFileMessage,\n    updateUserMessage,\n    updateFileMessage,\n    resendMessage,\n    deleteMessage,\n    resetWithStartingPoint,\n  };\n};\n"],"mappings":"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"}