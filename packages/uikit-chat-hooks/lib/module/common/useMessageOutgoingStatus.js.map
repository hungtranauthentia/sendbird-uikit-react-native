{"version":3,"names":["isDifferentChannel","isMyMessage","useForceUpdate","useUniqHandlerId","useChannelHandler","useAppFeatures","useMessageOutgoingStatus","sdk","channel","message","features","forceUpdate","currentUser","handlerId","onUndeliveredMemberStatusUpdated","eventChannel","userId","onUnreadMemberStatusUpdated","sendingStatus","isBroadcast","isSuper","getUnreadMemberCount","deliveryReceiptEnabled","getUndeliveredMemberCount"],"sources":["useMessageOutgoingStatus.ts"],"sourcesContent":["import type { SendbirdChatSDK, SendbirdGroupChannel, SendbirdMessage } from '@sendbird/uikit-utils';\nimport { isDifferentChannel, isMyMessage, useForceUpdate, useUniqHandlerId } from '@sendbird/uikit-utils';\n\nimport { useChannelHandler } from '../handler/useChannelHandler';\nimport { useAppFeatures } from './useAppFeatures';\n\nexport type SBUOutgoingStatus = 'NONE' | 'PENDING' | 'FAILED' | 'UNDELIVERED' | 'DELIVERED' | 'UNREAD' | 'READ';\n\nexport const useMessageOutgoingStatus = (\n  sdk: SendbirdChatSDK,\n  channel: SendbirdGroupChannel,\n  message?: SendbirdMessage | null,\n): SBUOutgoingStatus => {\n  const features = useAppFeatures(sdk);\n  const forceUpdate = useForceUpdate();\n  const currentUser = sdk.currentUser;\n  const handlerId = useUniqHandlerId('useMessageOutgoingStatus');\n\n  useChannelHandler(sdk, handlerId, {\n    onUndeliveredMemberStatusUpdated(eventChannel) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (!isMyMessage(message, currentUser?.userId)) return;\n\n      forceUpdate();\n    },\n    onUnreadMemberStatusUpdated(eventChannel) {\n      if (isDifferentChannel(channel, eventChannel)) return;\n      if (!isMyMessage(message, currentUser?.userId)) return;\n\n      forceUpdate();\n    },\n  });\n\n  if (!message) return 'NONE';\n\n  if ('sendingStatus' in message) {\n    if (message.sendingStatus === 'pending') return 'PENDING';\n    if (message.sendingStatus === 'failed') return 'FAILED';\n  }\n\n  if (channel.isBroadcast || channel.isSuper) return 'NONE';\n\n  if (channel.getUnreadMemberCount(message) === 0) return 'READ';\n\n  if (features.deliveryReceiptEnabled) {\n    if (channel.getUndeliveredMemberCount(message) === 0) return 'DELIVERED';\n    return 'UNDELIVERED';\n  }\n\n  return 'UNREAD';\n};\n"],"mappings":"AACA,SAASA,kBAAkB,EAAEC,WAAW,EAAEC,cAAc,EAAEC,gBAAgB,QAAQ,uBAAuB;AAEzG,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,cAAc,QAAQ,kBAAkB;AAIjD,OAAO,MAAMC,wBAAwB,GAAGA,CACtCC,GAAoB,EACpBC,OAA6B,EAC7BC,OAAgC,KACV;EACtB,MAAMC,QAAQ,GAAGL,cAAc,CAACE,GAAG,CAAC;EACpC,MAAMI,WAAW,GAAGT,cAAc,EAAE;EACpC,MAAMU,WAAW,GAAGL,GAAG,CAACK,WAAW;EACnC,MAAMC,SAAS,GAAGV,gBAAgB,CAAC,0BAA0B,CAAC;EAE9DC,iBAAiB,CAACG,GAAG,EAAEM,SAAS,EAAE;IAChCC,gCAAgCA,CAACC,YAAY,EAAE;MAC7C,IAAIf,kBAAkB,CAACQ,OAAO,EAAEO,YAAY,CAAC,EAAE;MAC/C,IAAI,CAACd,WAAW,CAACQ,OAAO,EAAEG,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,MAAM,CAAC,EAAE;MAEhDL,WAAW,EAAE;IACf,CAAC;IACDM,2BAA2BA,CAACF,YAAY,EAAE;MACxC,IAAIf,kBAAkB,CAACQ,OAAO,EAAEO,YAAY,CAAC,EAAE;MAC/C,IAAI,CAACd,WAAW,CAACQ,OAAO,EAAEG,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,MAAM,CAAC,EAAE;MAEhDL,WAAW,EAAE;IACf;EACF,CAAC,CAAC;EAEF,IAAI,CAACF,OAAO,EAAE,OAAO,MAAM;EAE3B,IAAI,eAAe,IAAIA,OAAO,EAAE;IAC9B,IAAIA,OAAO,CAACS,aAAa,KAAK,SAAS,EAAE,OAAO,SAAS;IACzD,IAAIT,OAAO,CAACS,aAAa,KAAK,QAAQ,EAAE,OAAO,QAAQ;EACzD;EAEA,IAAIV,OAAO,CAACW,WAAW,IAAIX,OAAO,CAACY,OAAO,EAAE,OAAO,MAAM;EAEzD,IAAIZ,OAAO,CAACa,oBAAoB,CAACZ,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,MAAM;EAE9D,IAAIC,QAAQ,CAACY,sBAAsB,EAAE;IACnC,IAAId,OAAO,CAACe,yBAAyB,CAACd,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,WAAW;IACxE,OAAO,aAAa;EACtB;EAEA,OAAO,QAAQ;AACjB,CAAC"}