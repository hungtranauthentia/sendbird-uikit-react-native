{"version":3,"names":["useEffect","useLayoutEffect","useRef","GroupChannelHandler","OpenChannelHandler","useChannelHandler","sdk","handlerId","hookHandler","type","arguments","length","undefined","handlerRef","current","handlerMapper","handler","handlerKeys","Object","keys","forEach","key","_handlerRef$current","_handlerRef$current$k","_len","args","Array","_key","call","groupChannel","addGroupChannelHandler","openChannel","addOpenChannelHandler","removeGroupChannelHandler","removeOpenChannelHandler"],"sources":["useChannelHandler.ts"],"sourcesContent":["import { useEffect, useLayoutEffect, useRef } from 'react';\n\nimport { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport { OpenChannelHandler } from '@sendbird/chat/openChannel';\nimport type { SendbirdChatSDK } from '@sendbird/uikit-utils';\n\ntype ChannelType = 'open' | 'group';\n\nexport const useChannelHandler = <T extends ChannelType = 'group'>(\n  sdk: SendbirdChatSDK,\n  handlerId: string,\n  hookHandler: Partial<T extends 'group' ? GroupChannelHandler : OpenChannelHandler>,\n  type: T = 'group' as T,\n) => {\n  const handlerRef = useRef(hookHandler);\n  useLayoutEffect(() => {\n    handlerRef.current = hookHandler;\n  });\n\n  useEffect(() => {\n    const handlerMapper = <T extends GroupChannelHandler | OpenChannelHandler>(handler: T): T => {\n      const handlerKeys = Object.keys(handler) as (keyof T)[];\n      handlerKeys.forEach((key) => {\n        // @ts-ignore\n        handler[key] = (...args: unknown[]) => handlerRef.current?.[key]?.(...args);\n      });\n      return handler;\n    };\n\n    if (type === 'group') {\n      sdk.groupChannel.addGroupChannelHandler(handlerId, handlerMapper(new GroupChannelHandler()));\n    } else if (type === 'open') {\n      sdk.openChannel.addOpenChannelHandler(handlerId, handlerMapper(new OpenChannelHandler()));\n    }\n\n    return () => {\n      if (type === 'group') {\n        sdk.groupChannel.removeGroupChannelHandler(handlerId);\n      } else if (type === 'open') {\n        sdk.openChannel.removeOpenChannelHandler(handlerId);\n      }\n    };\n  }, [sdk, handlerId]);\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,eAAe,EAAEC,MAAM,QAAQ,OAAO;AAE1D,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,SAASC,kBAAkB,QAAQ,4BAA4B;AAK/D,OAAO,MAAMC,iBAAiB,GAAG,SAAAA,CAC/BC,GAAoB,EACpBC,SAAiB,EACjBC,WAAkF,EAE/E;EAAA,IADHC,IAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,OAAO;EAEjB,MAAMG,UAAU,GAAGX,MAAM,CAACM,WAAW,CAAC;EACtCP,eAAe,CAAC,MAAM;IACpBY,UAAU,CAACC,OAAO,GAAGN,WAAW;EAClC,CAAC,CAAC;EAEFR,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAwDC,OAAU,IAAQ;MAC3F,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAgB;MACvDC,WAAW,CAACG,OAAO,CAAEC,GAAG,IAAK;QAC3B;QACAL,OAAO,CAACK,GAAG,CAAC,GAAG;UAAA,IAAAC,mBAAA,EAAAC,qBAAA;UAAA,SAAAC,IAAA,GAAAd,SAAA,CAAAC,MAAA,EAAIc,IAAI,OAAAC,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;YAAJF,IAAI,CAAAE,IAAA,IAAAjB,SAAA,CAAAiB,IAAA;UAAA;UAAA,QAAAL,mBAAA,GAAgBT,UAAU,CAACC,OAAO,cAAAQ,mBAAA,wBAAAC,qBAAA,GAAlBD,mBAAA,CAAqBD,GAAG,CAAC,cAAAE,qBAAA,uBAAzBA,qBAAA,CAAAK,IAAA,CAAAN,mBAAA,EAA4B,GAAGG,IAAI,CAAC;QAAA;MAC7E,CAAC,CAAC;MACF,OAAOT,OAAO;IAChB,CAAC;IAED,IAAIP,IAAI,KAAK,OAAO,EAAE;MACpBH,GAAG,CAACuB,YAAY,CAACC,sBAAsB,CAACvB,SAAS,EAAEQ,aAAa,CAAC,IAAIZ,mBAAmB,EAAE,CAAC,CAAC;IAC9F,CAAC,MAAM,IAAIM,IAAI,KAAK,MAAM,EAAE;MAC1BH,GAAG,CAACyB,WAAW,CAACC,qBAAqB,CAACzB,SAAS,EAAEQ,aAAa,CAAC,IAAIX,kBAAkB,EAAE,CAAC,CAAC;IAC3F;IAEA,OAAO,MAAM;MACX,IAAIK,IAAI,KAAK,OAAO,EAAE;QACpBH,GAAG,CAACuB,YAAY,CAACI,yBAAyB,CAAC1B,SAAS,CAAC;MACvD,CAAC,MAAM,IAAIE,IAAI,KAAK,MAAM,EAAE;QAC1BH,GAAG,CAACyB,WAAW,CAACG,wBAAwB,CAAC3B,SAAS,CAAC;MACrD;IACF,CAAC;EACH,CAAC,EAAE,CAACD,GAAG,EAAEC,SAAS,CAAC,CAAC;AACtB,CAAC"}